/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "amux.h"
#include "dmux.h"
#include "processCommand.h"
#include <string.h>
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
CRC_HandleTypeDef hcrc;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
  int Amux_ID = 6;
  int Amux_InSelect = 0;
  int Dmux_ID = 5; // Example demultiplexer ID
  int Dmux_InSelect = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define START_OF_FRAME 0x5F
#define END_OF_FRAME 0x6E
#define CMD_GREEN_LED 0x01
#define CMD_RED_LED 0x02
#define ACK "ACK\n"
#define NACK "NACK\n"

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  //huart1.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8; // Set threshold to 1/8 of the FIFO size
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_CRC_Init();
  /* USER CODE BEGIN 2 */
 /*
  uint8_t txData[] = "Testing VCP!";
   uint8_t rxData[4];

   HAL_UART_Transmit(&huart1, txData, sizeof(txData), HAL_MAX_DELAY);
   char rxBuffer[50];
   char ackMessage[] = "ACK\n";
   int N, M;
   */
   uint8_t rxBuffer[10];
       uint16_t rxIndex = 0;
       uint8_t rxByte;

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
       HAL_GPIO_TogglePin(GPIOG, DEVLED_RED_Pin);
       HAL_GPIO_TogglePin(GPIOG, DEVLED_GREEN_Pin);
  while (1)
  {

	  if (HAL_UART_Receive(&huart1, &rxByte, 1, HAL_MAX_DELAY) == HAL_OK)
	          {
	              rxBuffer[rxIndex++] = rxByte;

	              if (rxIndex >= 6 && rxBuffer[0] == START_OF_FRAME && rxBuffer[rxIndex - 1] == END_OF_FRAME)
	              {
	                  processCommand(rxBuffer, rxIndex);
	                  rxIndex = 0;
	              }
	              else if (rxIndex >= sizeof(rxBuffer))
	              {
	                  rxIndex = 0;
	                  HAL_UART_Transmit(&huart1, (uint8_t *)NACK, strlen(NACK), HAL_MAX_DELAY);
	              }
	          }



	  //HAL_GPIO_TogglePin(GPIOG, DEVLED_GREEN_Pin); // Replace GPIOA & GPIO_PIN_5 with your green LED pin
	      // Delay for 500ms
	  //HAL_Delay(500);
	    //HAL_UART_Transmit(&huart1, txData, sizeof(txData), HAL_MAX_DELAY);
	  HAL_GPIO_TogglePin(GPIOG, DEVLED_RED_Pin);
	  /*

	      // Toggle DEVLED_RED
	      HAL_GPIO_TogglePin(GPIOG, DEVLED_RED_Pin); // Replace GPIOB & GPIO_PIN_6 with your red LED pin
	      // Delay for 500ms
	      HAL_Delay(500);

	      HAL_GPIO_WritePin(AMUX6_A1_GPIO_Port, AMUX6_A1_Pin, GPIO_PIN_SET);
	      HAL_GPIO_WritePin(AMUX6_A2_GPIO_Port, AMUX6_A2_Pin, GPIO_PIN_SET);
	      HAL_GPIO_WritePin(AMUX6_A0_GPIO_Port, AMUX6_A0_Pin, GPIO_PIN_SET);
	      HAL_GPIO_WritePin(AMUX6_EN_GPIO_Port, AMUX6_EN_Pin, GPIO_PIN_RESET); // ENabled
	      HAL_GPIO_WritePin(BATTSIM_PSUP_EN_GPIO_Port, BATTSIM_PSUP_EN_Pin, GPIO_PIN_SET); //Variable psup enable
	      HAL_GPIO_WritePin(DMUX6_A1_GPIO_Port, DMUX6_A1_Pin, GPIO_PIN_SET);
	      HAL_GPIO_WritePin(DMUX6_A0_GPIO_Port, DMUX6_A0_Pin, GPIO_PIN_SET);
	      HAL_GPIO_WritePin(DMUX6_EN_GPIO_Port, DMUX6_EN_Pin, GPIO_PIN_SET); // ENabled
	           AMUX_dir(1, 3);
      AMUX_dir(2, 3);
      AMUX_dir(3, 3);
      AMUX_dir(4, 3);
      AMUX_dir(5, 3);
      AMUX_dir(6, 3);
      AMUX_dir(7, 3);
      AMUX_dir(0, 3);
       */
 /*     // Receive UART message
      HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), HAL_MAX_DELAY);

      // Parse the message
      if (sscanf(rxBuffer, "AMUX %d,%d", &N, &M) == 2) {
          // Call the AMUX_dir function with parsed values
          AMUX_dir(N, M);

          // Send acknowledgment
          HAL_UART_Transmit(&huart1, (uint8_t *)ackMessage, strlen(ackMessage), HAL_MAX_DELAY);
      }

      // Clear the buffer
      memset(rxBuffer, 0, sizeof(rxBuffer));



	      for (Amux_InSelect = 0; Amux_InSelect < 8; Amux_InSelect++)
	      {
	        AMUX_dir(0, Amux_InSelect);
	        AMUX_dir(1, Amux_InSelect);
	        AMUX_dir(2, Amux_InSelect);
	        AMUX_dir(3, Amux_InSelect);
	        AMUX_dir(4, Amux_InSelect);
	        AMUX_dir(5, Amux_InSelect);
	        AMUX_dir(6, Amux_InSelect);
	        AMUX_dir(7, Amux_InSelect);
	        HAL_Delay(200); // Delay for 400ms
	      }


      	  	  for (Dmux_InSelect = 0; Dmux_InSelect < 4; Dmux_InSelect++)
	          {
	            DMUX_dir(0, Dmux_InSelect);
	            DMUX_dir(1, Dmux_InSelect);
	            DMUX_dir(2, Dmux_InSelect);
	            DMUX_dir(3, Dmux_InSelect);
	            DMUX_dir(4, Dmux_InSelect);
	            DMUX_dir(5, Dmux_InSelect);
	            DMUX_dir(6, Dmux_InSelect);
	            DMUX_dir(7, Dmux_InSelect);
	            DMUX_dir(8, Dmux_InSelect);
	            DMUX_dir(9, Dmux_InSelect);
	            DMUX_dir(10, Dmux_InSelect);
	            DMUX_dir(11, Dmux_InSelect);
	            DMUX_dir(12, Dmux_InSelect);
	            HAL_Delay(400); // Delay for 400ms
	  	       }


              if (HAL_GPIO_ReadPin(DEV_SW_GPIO_Port, DEV_SW_Pin) == GPIO_PIN_SET) {
                  // Set LOAD_EN0_Pin, LOAD_EN1_Pin, and LOAD_EN2_Pin
                  HAL_GPIO_WritePin(LOAD_EN0_GPIO_Port, LOAD_EN0_Pin, GPIO_PIN_SET);
                  HAL_GPIO_WritePin(LOAD_EN1_GPIO_Port, LOAD_EN1_Pin, GPIO_PIN_SET);
                  HAL_GPIO_WritePin(LOAD_EN2_GPIO_Port, LOAD_EN2_Pin, GPIO_PIN_SET);
              } else {
                  // Reset LOAD_EN0_Pin, LOAD_EN1_Pin, and LOAD_EN2_Pin
                  HAL_GPIO_WritePin(LOAD_EN0_GPIO_Port, LOAD_EN0_Pin, GPIO_PIN_RESET);
                  HAL_GPIO_WritePin(LOAD_EN1_GPIO_Port, LOAD_EN1_Pin, GPIO_PIN_RESET);
                  HAL_GPIO_WritePin(LOAD_EN2_GPIO_Port, LOAD_EN2_Pin, GPIO_PIN_RESET);
              }
              if (HAL_GPIO_ReadPin(DEV_SW_GPIO_Port, DEV_SW_Pin) == GPIO_PIN_RESET) {
                  // Set LOAD_EN0_Pin, LOAD_EN1_Pin, and LOAD_EN2_Pin
                  HAL_GPIO_WritePin(BATTSIM_PSUP_EN_GPIO_Port, BATTSIM_PSUP_EN_Pin, GPIO_PIN_SET);

              } else {
                  // Reset LOAD_EN0_Pin, LOAD_EN1_Pin, and LOAD_EN2_Pin
                  HAL_GPIO_WritePin(BATTSIM_PSUP_EN_GPIO_Port, BATTSIM_PSUP_EN_Pin, GPIO_PIN_SET);
              }
                    if (HAL_UART_Receive(&huart1, rxData, sizeof(rxData), HAL_MAX_DELAY) == HAL_OK) {
          // Transmit received data
          HAL_UART_Transmit(&huart1, rxData, sizeof(rxData), HAL_MAX_DELAY);
      }
      */


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{

  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AMUX1_A0_Pin|AMUX2_EN_Pin|AMUX2_A2_Pin|AMUX2_A1_Pin
                          |AMUX2_A0_Pin|DMUX9_A1_Pin|DMUX8_A1_Pin|DMUX9_EN_Pin
                          |DMUX10_A0_Pin|DMUX10_EN_Pin|DMUX10_A1_Pin|DMUX11_A1_Pin
                          |DMUX11_A0_Pin|DMUX11_EN_Pin|AMUX0_A1_Pin|AMUX0_A0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AMUX3_EN_Pin|AMUX3_A2_Pin|AMUX3_A1_Pin|DMUX4_EN_Pin
                          |DMUX4_A1_Pin|BATTSIM_PSUP_EN_Pin|BON_BATT_EN_Pin|DMUX5_A0_Pin
                          |DMUX6_A1_Pin|DMUX1_A0_Pin|DMUX0_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, AMUX1_A1_Pin|AMUX3_A0_Pin|AMUX4_EN_Pin|AMUX4_A2_Pin
                          |AMUX4_A1_Pin|AMUX4_A0_Pin|AMUX1_A2_Pin|AMUX1_EN_Pin
                          |AMUX7_A0_Pin|DMUX3_EN_Pin|DMUX4_A0_Pin|DMUX7_A0_Pin
                          |DMUX6_A0_Pin|DMUX7_A1_Pin|DMUX8_EN_Pin|DMUX7_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LOAD_EN2_Pin|LOAD_EN1_Pin|LOAD_EN0_Pin|DMUX1_A1_Pin
                          |DMUX0_A1_Pin|DMUX0_A0_Pin|UART2_SELECT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DMUX5_A1_Pin|DMUX6_EN_Pin|DMUX5_EN_Pin|DMUX12_A1_Pin
                          |DMUX12_A0_Pin|AMUX7_A1_Pin|AMUX6_EN_Pin|AMUX0_EN_Pin
                          |AMUX0_A2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DMUX9_A0_Pin|DMUX8_A0_Pin|DEVLED_RED_Pin|UART2_EN0_Pin
                          |DEVLED_GREEN_Pin|DMUX3_A1_Pin|DMUX3_A0_Pin|DMUX2_EN_Pin
                          |DMUX2_A1_Pin|AMUX6_A1_Pin|AMUX5_A2_Pin|AMUX6_A0_Pin
                          |AMUX5_A1_Pin|AMUX7_EN_Pin|AMUX5_A0_Pin|AMUX7_A2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, UART3_SELECT_Pin|UART3_EN0_Pin|UART3_EN1_Pin|DMUX12_EN_Pin
                          |UART2_EN1_Pin|UART_SELECTOR_6_7_Pin|DMUX2_A0_Pin|DMUX1_EN_Pin
                          |AMUX6_A2_Pin|AMUX5_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : AMUX1_A0_Pin AMUX2_EN_Pin AMUX2_A2_Pin AMUX2_A1_Pin
                           AMUX2_A0_Pin DMUX9_A1_Pin DMUX8_A1_Pin DMUX9_EN_Pin
                           DMUX10_A0_Pin DMUX10_EN_Pin DMUX10_A1_Pin DMUX11_A1_Pin
                           DMUX11_A0_Pin DMUX11_EN_Pin AMUX0_A1_Pin AMUX0_A0_Pin */
  GPIO_InitStruct.Pin = AMUX1_A0_Pin|AMUX2_EN_Pin|AMUX2_A2_Pin|AMUX2_A1_Pin
                          |AMUX2_A0_Pin|DMUX9_A1_Pin|DMUX8_A1_Pin|DMUX9_EN_Pin
                          |DMUX10_A0_Pin|DMUX10_EN_Pin|DMUX10_A1_Pin|DMUX11_A1_Pin
                          |DMUX11_A0_Pin|DMUX11_EN_Pin|AMUX0_A1_Pin|AMUX0_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : AMUX3_EN_Pin AMUX3_A2_Pin AMUX3_A1_Pin DMUX4_EN_Pin
                           DMUX4_A1_Pin BATTSIM_PSUP_EN_Pin BON_BATT_EN_Pin DMUX5_A0_Pin
                           DMUX6_A1_Pin DMUX1_A0_Pin DMUX0_EN_Pin */
  GPIO_InitStruct.Pin = AMUX3_EN_Pin|AMUX3_A2_Pin|AMUX3_A1_Pin|DMUX4_EN_Pin
                          |DMUX4_A1_Pin|BATTSIM_PSUP_EN_Pin|BON_BATT_EN_Pin|DMUX5_A0_Pin
                          |DMUX6_A1_Pin|DMUX1_A0_Pin|DMUX0_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : AMUX1_A1_Pin AMUX3_A0_Pin AMUX4_EN_Pin AMUX4_A2_Pin
                           AMUX4_A1_Pin AMUX4_A0_Pin AMUX1_A2_Pin AMUX1_EN_Pin
                           AMUX7_A0_Pin DMUX3_EN_Pin DMUX4_A0_Pin DMUX7_A0_Pin
                           DMUX6_A0_Pin DMUX7_A1_Pin DMUX8_EN_Pin DMUX7_EN_Pin */
  GPIO_InitStruct.Pin = AMUX1_A1_Pin|AMUX3_A0_Pin|AMUX4_EN_Pin|AMUX4_A2_Pin
                          |AMUX4_A1_Pin|AMUX4_A0_Pin|AMUX1_A2_Pin|AMUX1_EN_Pin
                          |AMUX7_A0_Pin|DMUX3_EN_Pin|DMUX4_A0_Pin|DMUX7_A0_Pin
                          |DMUX6_A0_Pin|DMUX7_A1_Pin|DMUX8_EN_Pin|DMUX7_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

  /*Configure GPIO pins : LOAD_EN2_Pin LOAD_EN1_Pin LOAD_EN0_Pin DMUX1_A1_Pin
                           DMUX0_A1_Pin DMUX0_A0_Pin UART2_SELECT_Pin */
  GPIO_InitStruct.Pin = LOAD_EN2_Pin|LOAD_EN1_Pin|LOAD_EN0_Pin|DMUX1_A1_Pin
                          |DMUX0_A1_Pin|DMUX0_A0_Pin|UART2_SELECT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : SPI1_CS_Pin SPI1_SCLK_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|SPI1_SCLK_Pin|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : DMUX5_A1_Pin DMUX6_EN_Pin DMUX5_EN_Pin DMUX12_A1_Pin
                           DMUX12_A0_Pin AMUX7_A1_Pin AMUX6_EN_Pin AMUX0_EN_Pin
                           AMUX0_A2_Pin */
  GPIO_InitStruct.Pin = DMUX5_A1_Pin|DMUX6_EN_Pin|DMUX5_EN_Pin|DMUX12_A1_Pin
                          |DMUX12_A0_Pin|AMUX7_A1_Pin|AMUX6_EN_Pin|AMUX0_EN_Pin
                          |AMUX0_A2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : DMUX9_A0_Pin DMUX8_A0_Pin DEVLED_RED_Pin UART2_EN0_Pin
                           DEVLED_GREEN_Pin DMUX3_A1_Pin DMUX3_A0_Pin DMUX2_EN_Pin
                           DMUX2_A1_Pin AMUX6_A1_Pin AMUX5_A2_Pin AMUX6_A0_Pin
                           AMUX5_A1_Pin AMUX7_EN_Pin AMUX5_A0_Pin AMUX7_A2_Pin */
  GPIO_InitStruct.Pin = DMUX9_A0_Pin|DMUX8_A0_Pin|DEVLED_RED_Pin|UART2_EN0_Pin
                          |DEVLED_GREEN_Pin|DMUX3_A1_Pin|DMUX3_A0_Pin|DMUX2_EN_Pin
                          |DMUX2_A1_Pin|AMUX6_A1_Pin|AMUX5_A2_Pin|AMUX6_A0_Pin
                          |AMUX5_A1_Pin|AMUX7_EN_Pin|AMUX5_A0_Pin|AMUX7_A2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /*Configure GPIO pins : SPI2_CS_Pin SPI2_SCLK_Pin PB14 PB15 */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|SPI2_SCLK_Pin|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : STM_UART3_TX_Pin STM_UART3_RX_Pin */
  GPIO_InitStruct.Pin = STM_UART3_TX_Pin|STM_UART3_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : UART3_SELECT_Pin UART3_EN0_Pin UART3_EN1_Pin DMUX12_EN_Pin
                           UART2_EN1_Pin UART_SELECTOR_6_7_Pin DMUX2_A0_Pin DMUX1_EN_Pin
                           AMUX6_A2_Pin AMUX5_EN_Pin */
  GPIO_InitStruct.Pin = UART3_SELECT_Pin|UART3_EN0_Pin|UART3_EN1_Pin|DMUX12_EN_Pin
                          |UART2_EN1_Pin|UART_SELECTOR_6_7_Pin|DMUX2_A0_Pin|DMUX1_EN_Pin
                          |AMUX6_A2_Pin|AMUX5_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : STM_UART6_TX_Pin STM_UART6_RX_Pin */
  GPIO_InitStruct.Pin = STM_UART6_TX_Pin|STM_UART6_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : STM_UART4_TX_Pin STM_UART4_RX_Pin */
  GPIO_InitStruct.Pin = STM_UART4_TX_Pin|STM_UART4_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : STM_UART5_TX_Pin */
  GPIO_InitStruct.Pin = STM_UART5_TX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
  HAL_GPIO_Init(STM_UART5_TX_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : DEV_SW_Pin */
  GPIO_InitStruct.Pin = DEV_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(DEV_SW_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : STM_UART5_RX_Pin */
  GPIO_InitStruct.Pin = STM_UART5_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
  HAL_GPIO_Init(STM_UART5_RX_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : STM_UART2_TX_Pin STM_UART2_RX_Pin */
  GPIO_InitStruct.Pin = STM_UART2_TX_Pin|STM_UART2_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM1 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
