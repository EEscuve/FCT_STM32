
Terra.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000375c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003920  08003920  00013920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003958  08003958  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003958  08003958  00013958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003960  08003960  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003960  08003960  00013960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003964  08003964  00013964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000010  08003978  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08003978  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108dd  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002942  00000000  00000000  0003091d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  00033260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  00034018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023c18  00000000  00000000  00034cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f3a  00000000  00000000  000588c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d22a3  00000000  00000000  0006b802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013daa5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036f8  00000000  00000000  0013daf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003908 	.word	0x08003908

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08003908 	.word	0x08003908

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <AMUX_dir>:
#include "amux.h"
//returns 1 if function sets the corresponding values, and returns 0 if the parameters were not correct
uint8_t AMUX_dir(uint8_t Amux_ID, uint8_t Amux_InSelect, uint8_t EN)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
 8000512:	460b      	mov	r3, r1
 8000514:	71bb      	strb	r3, [r7, #6]
 8000516:	4613      	mov	r3, r2
 8000518:	717b      	strb	r3, [r7, #5]
  GPIO_TypeDef* A0_Port;
  GPIO_TypeDef* A1_Port;
  GPIO_TypeDef* A2_Port;
  GPIO_TypeDef* EN_Port;
  uint16_t A0_Pin, A1_Pin, A2_Pin, EN_Pin;
  switch (Amux_ID)
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	2b07      	cmp	r3, #7
 800051e:	f200 80a8 	bhi.w	8000672 <AMUX_dir+0x16a>
 8000522:	a201      	add	r2, pc, #4	; (adr r2, 8000528 <AMUX_dir+0x20>)
 8000524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000528:	08000549 	.word	0x08000549
 800052c:	0800056f 	.word	0x0800056f
 8000530:	08000591 	.word	0x08000591
 8000534:	080005b3 	.word	0x080005b3
 8000538:	080005db 	.word	0x080005db
 800053c:	080005fd 	.word	0x080005fd
 8000540:	08000625 	.word	0x08000625
 8000544:	0800064b 	.word	0x0800064b
  {
    case 0:
      A0_Port = AMUX0_A0_GPIO_Port;
 8000548:	4b77      	ldr	r3, [pc, #476]	; (8000728 <AMUX_dir+0x220>)
 800054a:	61fb      	str	r3, [r7, #28]
      A0_Pin = AMUX0_A0_Pin;
 800054c:	2302      	movs	r3, #2
 800054e:	81fb      	strh	r3, [r7, #14]
      A1_Port = AMUX0_A1_GPIO_Port;
 8000550:	4b75      	ldr	r3, [pc, #468]	; (8000728 <AMUX_dir+0x220>)
 8000552:	61bb      	str	r3, [r7, #24]
      A1_Pin = AMUX0_A1_Pin;
 8000554:	2301      	movs	r3, #1
 8000556:	81bb      	strh	r3, [r7, #12]
      A2_Port = AMUX0_A2_GPIO_Port;
 8000558:	4b74      	ldr	r3, [pc, #464]	; (800072c <AMUX_dir+0x224>)
 800055a:	617b      	str	r3, [r7, #20]
      A2_Pin = AMUX0_A2_Pin;
 800055c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000560:	817b      	strh	r3, [r7, #10]
      EN_Port = AMUX0_EN_GPIO_Port;
 8000562:	4b72      	ldr	r3, [pc, #456]	; (800072c <AMUX_dir+0x224>)
 8000564:	613b      	str	r3, [r7, #16]
      EN_Pin = AMUX0_EN_Pin;
 8000566:	f44f 7380 	mov.w	r3, #256	; 0x100
 800056a:	813b      	strh	r3, [r7, #8]
      break;
 800056c:	e083      	b.n	8000676 <AMUX_dir+0x16e>
    case 1:
      A0_Port = AMUX1_A0_GPIO_Port;
 800056e:	4b6e      	ldr	r3, [pc, #440]	; (8000728 <AMUX_dir+0x220>)
 8000570:	61fb      	str	r3, [r7, #28]
      A0_Pin = AMUX1_A0_Pin;
 8000572:	2304      	movs	r3, #4
 8000574:	81fb      	strh	r3, [r7, #14]
      A1_Port = AMUX1_A1_GPIO_Port;
 8000576:	4b6e      	ldr	r3, [pc, #440]	; (8000730 <AMUX_dir+0x228>)
 8000578:	61bb      	str	r3, [r7, #24]
      A1_Pin = AMUX1_A1_Pin;
 800057a:	2301      	movs	r3, #1
 800057c:	81bb      	strh	r3, [r7, #12]
      A2_Port = AMUX1_A2_GPIO_Port;
 800057e:	4b6c      	ldr	r3, [pc, #432]	; (8000730 <AMUX_dir+0x228>)
 8000580:	617b      	str	r3, [r7, #20]
      A2_Pin = AMUX1_A2_Pin;
 8000582:	2340      	movs	r3, #64	; 0x40
 8000584:	817b      	strh	r3, [r7, #10]
      EN_Port = AMUX1_EN_GPIO_Port;
 8000586:	4b6a      	ldr	r3, [pc, #424]	; (8000730 <AMUX_dir+0x228>)
 8000588:	613b      	str	r3, [r7, #16]
      EN_Pin = AMUX1_EN_Pin;
 800058a:	2380      	movs	r3, #128	; 0x80
 800058c:	813b      	strh	r3, [r7, #8]
      break;
 800058e:	e072      	b.n	8000676 <AMUX_dir+0x16e>
    case 2:
      A0_Port = AMUX2_A0_GPIO_Port;
 8000590:	4b65      	ldr	r3, [pc, #404]	; (8000728 <AMUX_dir+0x220>)
 8000592:	61fb      	str	r3, [r7, #28]
      A0_Pin = AMUX2_A0_Pin;
 8000594:	2340      	movs	r3, #64	; 0x40
 8000596:	81fb      	strh	r3, [r7, #14]
      A1_Port = AMUX2_A1_GPIO_Port;
 8000598:	4b63      	ldr	r3, [pc, #396]	; (8000728 <AMUX_dir+0x220>)
 800059a:	61bb      	str	r3, [r7, #24]
      A1_Pin = AMUX2_A1_Pin;
 800059c:	2320      	movs	r3, #32
 800059e:	81bb      	strh	r3, [r7, #12]
      A2_Port = AMUX2_A2_GPIO_Port;
 80005a0:	4b61      	ldr	r3, [pc, #388]	; (8000728 <AMUX_dir+0x220>)
 80005a2:	617b      	str	r3, [r7, #20]
      A2_Pin = AMUX2_A2_Pin;
 80005a4:	2310      	movs	r3, #16
 80005a6:	817b      	strh	r3, [r7, #10]
      EN_Port = AMUX2_EN_GPIO_Port;
 80005a8:	4b5f      	ldr	r3, [pc, #380]	; (8000728 <AMUX_dir+0x220>)
 80005aa:	613b      	str	r3, [r7, #16]
      EN_Pin = AMUX2_EN_Pin;
 80005ac:	2308      	movs	r3, #8
 80005ae:	813b      	strh	r3, [r7, #8]
      break;
 80005b0:	e061      	b.n	8000676 <AMUX_dir+0x16e>
    case 3:
      A0_Port = AMUX3_A0_GPIO_Port;
 80005b2:	4b5f      	ldr	r3, [pc, #380]	; (8000730 <AMUX_dir+0x228>)
 80005b4:	61fb      	str	r3, [r7, #28]
      A0_Pin = AMUX3_A0_Pin;
 80005b6:	2302      	movs	r3, #2
 80005b8:	81fb      	strh	r3, [r7, #14]
      A1_Port = AMUX3_A1_GPIO_Port;
 80005ba:	4b5e      	ldr	r3, [pc, #376]	; (8000734 <AMUX_dir+0x22c>)
 80005bc:	61bb      	str	r3, [r7, #24]
      A1_Pin = AMUX3_A1_Pin;
 80005be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005c2:	81bb      	strh	r3, [r7, #12]
      A2_Port = AMUX3_A2_GPIO_Port;
 80005c4:	4b5b      	ldr	r3, [pc, #364]	; (8000734 <AMUX_dir+0x22c>)
 80005c6:	617b      	str	r3, [r7, #20]
      A2_Pin = AMUX3_A2_Pin;
 80005c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005cc:	817b      	strh	r3, [r7, #10]
      EN_Port = AMUX3_EN_GPIO_Port;
 80005ce:	4b59      	ldr	r3, [pc, #356]	; (8000734 <AMUX_dir+0x22c>)
 80005d0:	613b      	str	r3, [r7, #16]
      EN_Pin = AMUX3_EN_Pin;
 80005d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005d6:	813b      	strh	r3, [r7, #8]
      break;
 80005d8:	e04d      	b.n	8000676 <AMUX_dir+0x16e>
    case 4:
      A0_Port = AMUX4_A0_GPIO_Port;
 80005da:	4b55      	ldr	r3, [pc, #340]	; (8000730 <AMUX_dir+0x228>)
 80005dc:	61fb      	str	r3, [r7, #28]
      A0_Pin = AMUX4_A0_Pin;
 80005de:	2320      	movs	r3, #32
 80005e0:	81fb      	strh	r3, [r7, #14]
      A1_Port = AMUX4_A1_GPIO_Port;
 80005e2:	4b53      	ldr	r3, [pc, #332]	; (8000730 <AMUX_dir+0x228>)
 80005e4:	61bb      	str	r3, [r7, #24]
      A1_Pin = AMUX4_A1_Pin;
 80005e6:	2310      	movs	r3, #16
 80005e8:	81bb      	strh	r3, [r7, #12]
      A2_Port = AMUX4_A2_GPIO_Port;
 80005ea:	4b51      	ldr	r3, [pc, #324]	; (8000730 <AMUX_dir+0x228>)
 80005ec:	617b      	str	r3, [r7, #20]
      A2_Pin = AMUX4_A2_Pin;
 80005ee:	2308      	movs	r3, #8
 80005f0:	817b      	strh	r3, [r7, #10]
      EN_Port = AMUX4_EN_GPIO_Port;
 80005f2:	4b4f      	ldr	r3, [pc, #316]	; (8000730 <AMUX_dir+0x228>)
 80005f4:	613b      	str	r3, [r7, #16]
      EN_Pin = AMUX4_EN_Pin;
 80005f6:	2304      	movs	r3, #4
 80005f8:	813b      	strh	r3, [r7, #8]
      break;
 80005fa:	e03c      	b.n	8000676 <AMUX_dir+0x16e>
    case 5:
      A0_Port = AMUX5_A0_GPIO_Port;
 80005fc:	4b4e      	ldr	r3, [pc, #312]	; (8000738 <AMUX_dir+0x230>)
 80005fe:	61fb      	str	r3, [r7, #28]
      A0_Pin = AMUX5_A0_Pin;
 8000600:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000604:	81fb      	strh	r3, [r7, #14]
      A1_Port = AMUX5_A1_GPIO_Port;
 8000606:	4b4c      	ldr	r3, [pc, #304]	; (8000738 <AMUX_dir+0x230>)
 8000608:	61bb      	str	r3, [r7, #24]
      A1_Pin = AMUX5_A1_Pin;
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	81bb      	strh	r3, [r7, #12]
      A2_Port = AMUX5_A2_GPIO_Port;
 8000610:	4b49      	ldr	r3, [pc, #292]	; (8000738 <AMUX_dir+0x230>)
 8000612:	617b      	str	r3, [r7, #20]
      A2_Pin = AMUX5_A2_Pin;
 8000614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000618:	817b      	strh	r3, [r7, #10]
      EN_Port = AMUX5_EN_GPIO_Port;
 800061a:	4b48      	ldr	r3, [pc, #288]	; (800073c <AMUX_dir+0x234>)
 800061c:	613b      	str	r3, [r7, #16]
      EN_Pin = AMUX5_EN_Pin;
 800061e:	2380      	movs	r3, #128	; 0x80
 8000620:	813b      	strh	r3, [r7, #8]
      break;
 8000622:	e028      	b.n	8000676 <AMUX_dir+0x16e>
    case 6:
      A0_Port = AMUX6_A0_GPIO_Port;
 8000624:	4b44      	ldr	r3, [pc, #272]	; (8000738 <AMUX_dir+0x230>)
 8000626:	61fb      	str	r3, [r7, #28]
      A0_Pin = AMUX6_A0_Pin;
 8000628:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800062c:	81fb      	strh	r3, [r7, #14]
      A1_Port = AMUX6_A1_GPIO_Port;
 800062e:	4b42      	ldr	r3, [pc, #264]	; (8000738 <AMUX_dir+0x230>)
 8000630:	61bb      	str	r3, [r7, #24]
      A1_Pin = AMUX6_A1_Pin;
 8000632:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000636:	81bb      	strh	r3, [r7, #12]
      A2_Port = AMUX6_A2_GPIO_Port;
 8000638:	4b40      	ldr	r3, [pc, #256]	; (800073c <AMUX_dir+0x234>)
 800063a:	617b      	str	r3, [r7, #20]
      A2_Pin = AMUX6_A2_Pin;
 800063c:	2310      	movs	r3, #16
 800063e:	817b      	strh	r3, [r7, #10]
      EN_Port = AMUX6_EN_GPIO_Port;
 8000640:	4b3a      	ldr	r3, [pc, #232]	; (800072c <AMUX_dir+0x224>)
 8000642:	613b      	str	r3, [r7, #16]
      EN_Pin = AMUX6_EN_Pin;
 8000644:	2320      	movs	r3, #32
 8000646:	813b      	strh	r3, [r7, #8]
      break;
 8000648:	e015      	b.n	8000676 <AMUX_dir+0x16e>
    case 7:
      A0_Port = AMUX7_A0_GPIO_Port;
 800064a:	4b39      	ldr	r3, [pc, #228]	; (8000730 <AMUX_dir+0x228>)
 800064c:	61fb      	str	r3, [r7, #28]
      A0_Pin = AMUX7_A0_Pin;
 800064e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000652:	81fb      	strh	r3, [r7, #14]
      A1_Port = AMUX7_A1_GPIO_Port;
 8000654:	4b35      	ldr	r3, [pc, #212]	; (800072c <AMUX_dir+0x224>)
 8000656:	61bb      	str	r3, [r7, #24]
      A1_Pin = AMUX7_A1_Pin;
 8000658:	2310      	movs	r3, #16
 800065a:	81bb      	strh	r3, [r7, #12]
      A2_Port = AMUX7_A2_GPIO_Port;
 800065c:	4b36      	ldr	r3, [pc, #216]	; (8000738 <AMUX_dir+0x230>)
 800065e:	617b      	str	r3, [r7, #20]
      A2_Pin = AMUX7_A2_Pin;
 8000660:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000664:	817b      	strh	r3, [r7, #10]
      EN_Port = AMUX7_EN_GPIO_Port;
 8000666:	4b34      	ldr	r3, [pc, #208]	; (8000738 <AMUX_dir+0x230>)
 8000668:	613b      	str	r3, [r7, #16]
      EN_Pin = AMUX7_EN_Pin;
 800066a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800066e:	813b      	strh	r3, [r7, #8]
      break;
 8000670:	e001      	b.n	8000676 <AMUX_dir+0x16e>
    default:
      return 0;
 8000672:	2300      	movs	r3, #0
 8000674:	e053      	b.n	800071e <AMUX_dir+0x216>
  }



  switch (EN)
 8000676:	797b      	ldrb	r3, [r7, #5]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d028      	beq.n	80006ce <AMUX_dir+0x1c6>
 800067c:	2b01      	cmp	r3, #1
 800067e:	d14d      	bne.n	800071c <AMUX_dir+0x214>
  {
    case 1:
        // Set the address pins based on Amux_InSelect
        HAL_GPIO_WritePin(A0_Port, A0_Pin, (Amux_InSelect & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000680:	79bb      	ldrb	r3, [r7, #6]
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	b2da      	uxtb	r2, r3
 8000688:	89fb      	ldrh	r3, [r7, #14]
 800068a:	4619      	mov	r1, r3
 800068c:	69f8      	ldr	r0, [r7, #28]
 800068e:	f001 fb5f 	bl	8001d50 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(A1_Port, A1_Pin, (Amux_InSelect & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000692:	79bb      	ldrb	r3, [r7, #6]
 8000694:	105b      	asrs	r3, r3, #1
 8000696:	b2db      	uxtb	r3, r3
 8000698:	f003 0301 	and.w	r3, r3, #1
 800069c:	b2da      	uxtb	r2, r3
 800069e:	89bb      	ldrh	r3, [r7, #12]
 80006a0:	4619      	mov	r1, r3
 80006a2:	69b8      	ldr	r0, [r7, #24]
 80006a4:	f001 fb54 	bl	8001d50 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(A2_Port, A2_Pin, (Amux_InSelect & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006a8:	79bb      	ldrb	r3, [r7, #6]
 80006aa:	109b      	asrs	r3, r3, #2
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	897b      	ldrh	r3, [r7, #10]
 80006b6:	4619      	mov	r1, r3
 80006b8:	6978      	ldr	r0, [r7, #20]
 80006ba:	f001 fb49 	bl	8001d50 <HAL_GPIO_WritePin>
        // Set the enable pin based on EN
        HAL_GPIO_WritePin(EN_Port, EN_Pin, GPIO_PIN_RESET);
 80006be:	893b      	ldrh	r3, [r7, #8]
 80006c0:	2200      	movs	r2, #0
 80006c2:	4619      	mov	r1, r3
 80006c4:	6938      	ldr	r0, [r7, #16]
 80006c6:	f001 fb43 	bl	8001d50 <HAL_GPIO_WritePin>
        return 1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	e027      	b.n	800071e <AMUX_dir+0x216>
    case 0:
        // Set the address pins based on Amux_InSelect
        HAL_GPIO_WritePin(A0_Port, A0_Pin, (Amux_InSelect & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006ce:	79bb      	ldrb	r3, [r7, #6]
 80006d0:	f003 0301 	and.w	r3, r3, #1
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	89fb      	ldrh	r3, [r7, #14]
 80006d8:	4619      	mov	r1, r3
 80006da:	69f8      	ldr	r0, [r7, #28]
 80006dc:	f001 fb38 	bl	8001d50 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(A1_Port, A1_Pin, (Amux_InSelect & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006e0:	79bb      	ldrb	r3, [r7, #6]
 80006e2:	105b      	asrs	r3, r3, #1
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	89bb      	ldrh	r3, [r7, #12]
 80006ee:	4619      	mov	r1, r3
 80006f0:	69b8      	ldr	r0, [r7, #24]
 80006f2:	f001 fb2d 	bl	8001d50 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(A2_Port, A2_Pin, (Amux_InSelect & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006f6:	79bb      	ldrb	r3, [r7, #6]
 80006f8:	109b      	asrs	r3, r3, #2
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	b2da      	uxtb	r2, r3
 8000702:	897b      	ldrh	r3, [r7, #10]
 8000704:	4619      	mov	r1, r3
 8000706:	6978      	ldr	r0, [r7, #20]
 8000708:	f001 fb22 	bl	8001d50 <HAL_GPIO_WritePin>
        // Set the enable pin based on EN
        HAL_GPIO_WritePin(EN_Port, EN_Pin, GPIO_PIN_SET);
 800070c:	893b      	ldrh	r3, [r7, #8]
 800070e:	2201      	movs	r2, #1
 8000710:	4619      	mov	r1, r3
 8000712:	6938      	ldr	r0, [r7, #16]
 8000714:	f001 fb1c 	bl	8001d50 <HAL_GPIO_WritePin>
        return 1;
 8000718:	2301      	movs	r3, #1
 800071a:	e000      	b.n	800071e <AMUX_dir+0x216>
    default:
    	return 0;
 800071c:	2300      	movs	r3, #0
  }

}
 800071e:	4618      	mov	r0, r3
 8000720:	3720      	adds	r7, #32
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40021000 	.word	0x40021000
 800072c:	40020400 	.word	0x40020400
 8000730:	40021400 	.word	0x40021400
 8000734:	40020800 	.word	0x40020800
 8000738:	40021800 	.word	0x40021800
 800073c:	40020c00 	.word	0x40020c00

08000740 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_CRC_Init+0x20>)
 8000746:	4a07      	ldr	r2, [pc, #28]	; (8000764 <MX_CRC_Init+0x24>)
 8000748:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_CRC_Init+0x20>)
 800074c:	f001 f91c 	bl	8001988 <HAL_CRC_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000756:	f000 fbdd 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	2000002c 	.word	0x2000002c
 8000764:	40023000 	.word	0x40023000

08000768 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a0b      	ldr	r2, [pc, #44]	; (80007a4 <HAL_CRC_MspInit+0x3c>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d10d      	bne.n	8000796 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <HAL_CRC_MspInit+0x40>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a09      	ldr	r2, [pc, #36]	; (80007a8 <HAL_CRC_MspInit+0x40>)
 8000784:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <HAL_CRC_MspInit+0x40>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000796:	bf00      	nop
 8000798:	3714      	adds	r7, #20
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40023000 	.word	0x40023000
 80007a8:	40023800 	.word	0x40023800

080007ac <DMUX_dir>:
 *      Author: EEV-Work
 */
#include "dmux.h"
//returns 1 if function sets the corresponding values, and returns 0 if the parameters were not correct
uint8_t DMUX_dir(uint8_t Dmux_ID, uint8_t Dmux_InSelect, uint8_t EN)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
 80007b6:	460b      	mov	r3, r1
 80007b8:	71bb      	strb	r3, [r7, #6]
 80007ba:	4613      	mov	r3, r2
 80007bc:	717b      	strb	r3, [r7, #5]
  GPIO_TypeDef* A0_Port;
  GPIO_TypeDef* A1_Port;
  GPIO_TypeDef* EN_Port;
  uint16_t A0_Pin, A1_Pin, EN_Pin;

  switch (Dmux_ID)
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b0c      	cmp	r3, #12
 80007c2:	f200 80de 	bhi.w	8000982 <DMUX_dir+0x1d6>
 80007c6:	a201      	add	r2, pc, #4	; (adr r2, 80007cc <DMUX_dir+0x20>)
 80007c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007cc:	08000801 	.word	0x08000801
 80007d0:	08000821 	.word	0x08000821
 80007d4:	0800083f 	.word	0x0800083f
 80007d8:	0800085b 	.word	0x0800085b
 80007dc:	08000877 	.word	0x08000877
 80007e0:	08000893 	.word	0x08000893
 80007e4:	080008ad 	.word	0x080008ad
 80007e8:	080008c9 	.word	0x080008c9
 80007ec:	080008e9 	.word	0x080008e9
 80007f0:	08000907 	.word	0x08000907
 80007f4:	08000923 	.word	0x08000923
 80007f8:	08000943 	.word	0x08000943
 80007fc:	08000963 	.word	0x08000963
  {
    case 0:
      A0_Port = DMUX0_A0_GPIO_Port;
 8000800:	4b82      	ldr	r3, [pc, #520]	; (8000a0c <DMUX_dir+0x260>)
 8000802:	61fb      	str	r3, [r7, #28]
      A0_Pin = DMUX0_A0_Pin;
 8000804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000808:	827b      	strh	r3, [r7, #18]
      A1_Port = DMUX0_A1_GPIO_Port;
 800080a:	4b80      	ldr	r3, [pc, #512]	; (8000a0c <DMUX_dir+0x260>)
 800080c:	61bb      	str	r3, [r7, #24]
      A1_Pin = DMUX0_A1_Pin;
 800080e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000812:	823b      	strh	r3, [r7, #16]
      EN_Port = DMUX0_EN_GPIO_Port;
 8000814:	4b7e      	ldr	r3, [pc, #504]	; (8000a10 <DMUX_dir+0x264>)
 8000816:	617b      	str	r3, [r7, #20]
      EN_Pin = DMUX0_EN_Pin;
 8000818:	f44f 7300 	mov.w	r3, #512	; 0x200
 800081c:	81fb      	strh	r3, [r7, #14]
      break;
 800081e:	e0b2      	b.n	8000986 <DMUX_dir+0x1da>
    case 1:
      A0_Port = DMUX1_A0_GPIO_Port;
 8000820:	4b7b      	ldr	r3, [pc, #492]	; (8000a10 <DMUX_dir+0x264>)
 8000822:	61fb      	str	r3, [r7, #28]
      A0_Pin = DMUX1_A0_Pin;
 8000824:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000828:	827b      	strh	r3, [r7, #18]
      A1_Port = DMUX1_A1_GPIO_Port;
 800082a:	4b78      	ldr	r3, [pc, #480]	; (8000a0c <DMUX_dir+0x260>)
 800082c:	61bb      	str	r3, [r7, #24]
      A1_Pin = DMUX1_A1_Pin;
 800082e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000832:	823b      	strh	r3, [r7, #16]
      EN_Port = DMUX1_EN_GPIO_Port;
 8000834:	4b77      	ldr	r3, [pc, #476]	; (8000a14 <DMUX_dir+0x268>)
 8000836:	617b      	str	r3, [r7, #20]
      EN_Pin = DMUX1_EN_Pin;
 8000838:	2308      	movs	r3, #8
 800083a:	81fb      	strh	r3, [r7, #14]
      break;
 800083c:	e0a3      	b.n	8000986 <DMUX_dir+0x1da>
    case 2:
      A0_Port = DMUX2_A0_GPIO_Port;
 800083e:	4b75      	ldr	r3, [pc, #468]	; (8000a14 <DMUX_dir+0x268>)
 8000840:	61fb      	str	r3, [r7, #28]
      A0_Pin = DMUX2_A0_Pin;
 8000842:	2302      	movs	r3, #2
 8000844:	827b      	strh	r3, [r7, #18]
      A1_Port = DMUX2_A1_GPIO_Port;
 8000846:	4b74      	ldr	r3, [pc, #464]	; (8000a18 <DMUX_dir+0x26c>)
 8000848:	61bb      	str	r3, [r7, #24]
      A1_Pin = DMUX2_A1_Pin;
 800084a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800084e:	823b      	strh	r3, [r7, #16]
      EN_Port = DMUX2_EN_GPIO_Port;
 8000850:	4b71      	ldr	r3, [pc, #452]	; (8000a18 <DMUX_dir+0x26c>)
 8000852:	617b      	str	r3, [r7, #20]
      EN_Pin = DMUX2_EN_Pin;
 8000854:	2380      	movs	r3, #128	; 0x80
 8000856:	81fb      	strh	r3, [r7, #14]
      break;
 8000858:	e095      	b.n	8000986 <DMUX_dir+0x1da>
    case 3:
      A0_Port = DMUX3_A0_GPIO_Port;
 800085a:	4b6f      	ldr	r3, [pc, #444]	; (8000a18 <DMUX_dir+0x26c>)
 800085c:	61fb      	str	r3, [r7, #28]
      A0_Pin = DMUX3_A0_Pin;
 800085e:	2340      	movs	r3, #64	; 0x40
 8000860:	827b      	strh	r3, [r7, #18]
      A1_Port = DMUX3_A1_GPIO_Port;
 8000862:	4b6d      	ldr	r3, [pc, #436]	; (8000a18 <DMUX_dir+0x26c>)
 8000864:	61bb      	str	r3, [r7, #24]
      A1_Pin = DMUX3_A1_Pin;
 8000866:	2320      	movs	r3, #32
 8000868:	823b      	strh	r3, [r7, #16]
      EN_Port = DMUX3_EN_GPIO_Port;
 800086a:	4b6c      	ldr	r3, [pc, #432]	; (8000a1c <DMUX_dir+0x270>)
 800086c:	617b      	str	r3, [r7, #20]
      EN_Pin = DMUX3_EN_Pin;
 800086e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000872:	81fb      	strh	r3, [r7, #14]
      break;
 8000874:	e087      	b.n	8000986 <DMUX_dir+0x1da>
    case 4:
      A0_Port = DMUX4_A0_GPIO_Port;
 8000876:	4b69      	ldr	r3, [pc, #420]	; (8000a1c <DMUX_dir+0x270>)
 8000878:	61fb      	str	r3, [r7, #28]
      A0_Pin = DMUX4_A0_Pin;
 800087a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800087e:	827b      	strh	r3, [r7, #18]
      A1_Port = DMUX4_A1_GPIO_Port;
 8000880:	4b63      	ldr	r3, [pc, #396]	; (8000a10 <DMUX_dir+0x264>)
 8000882:	61bb      	str	r3, [r7, #24]
      A1_Pin = DMUX4_A1_Pin;
 8000884:	2302      	movs	r3, #2
 8000886:	823b      	strh	r3, [r7, #16]
      EN_Port = DMUX4_EN_GPIO_Port;
 8000888:	4b61      	ldr	r3, [pc, #388]	; (8000a10 <DMUX_dir+0x264>)
 800088a:	617b      	str	r3, [r7, #20]
      EN_Pin = DMUX4_EN_Pin;
 800088c:	2301      	movs	r3, #1
 800088e:	81fb      	strh	r3, [r7, #14]
      break;
 8000890:	e079      	b.n	8000986 <DMUX_dir+0x1da>
    case 5:
      A0_Port = DMUX5_A0_GPIO_Port;
 8000892:	4b5f      	ldr	r3, [pc, #380]	; (8000a10 <DMUX_dir+0x264>)
 8000894:	61fb      	str	r3, [r7, #28]
      A0_Pin = DMUX5_A0_Pin;
 8000896:	2310      	movs	r3, #16
 8000898:	827b      	strh	r3, [r7, #18]
      A1_Port = DMUX5_A1_GPIO_Port;
 800089a:	4b61      	ldr	r3, [pc, #388]	; (8000a20 <DMUX_dir+0x274>)
 800089c:	61bb      	str	r3, [r7, #24]
      A1_Pin = DMUX5_A1_Pin;
 800089e:	2301      	movs	r3, #1
 80008a0:	823b      	strh	r3, [r7, #16]
      EN_Port = DMUX5_EN_GPIO_Port;
 80008a2:	4b5f      	ldr	r3, [pc, #380]	; (8000a20 <DMUX_dir+0x274>)
 80008a4:	617b      	str	r3, [r7, #20]
      EN_Pin = DMUX5_EN_Pin;
 80008a6:	2304      	movs	r3, #4
 80008a8:	81fb      	strh	r3, [r7, #14]
      break;
 80008aa:	e06c      	b.n	8000986 <DMUX_dir+0x1da>
    case 6:
      A0_Port = DMUX6_A0_GPIO_Port;
 80008ac:	4b5b      	ldr	r3, [pc, #364]	; (8000a1c <DMUX_dir+0x270>)
 80008ae:	61fb      	str	r3, [r7, #28]
      A0_Pin = DMUX6_A0_Pin;
 80008b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b4:	827b      	strh	r3, [r7, #18]
      A1_Port = DMUX6_A1_GPIO_Port;
 80008b6:	4b56      	ldr	r3, [pc, #344]	; (8000a10 <DMUX_dir+0x264>)
 80008b8:	61bb      	str	r3, [r7, #24]
      A1_Pin = DMUX6_A1_Pin;
 80008ba:	2320      	movs	r3, #32
 80008bc:	823b      	strh	r3, [r7, #16]
      EN_Port = DMUX6_EN_GPIO_Port;
 80008be:	4b58      	ldr	r3, [pc, #352]	; (8000a20 <DMUX_dir+0x274>)
 80008c0:	617b      	str	r3, [r7, #20]
      EN_Pin = DMUX6_EN_Pin;
 80008c2:	2302      	movs	r3, #2
 80008c4:	81fb      	strh	r3, [r7, #14]
      break;
 80008c6:	e05e      	b.n	8000986 <DMUX_dir+0x1da>
    case 7:
      A0_Port = DMUX7_A0_GPIO_Port;
 80008c8:	4b54      	ldr	r3, [pc, #336]	; (8000a1c <DMUX_dir+0x270>)
 80008ca:	61fb      	str	r3, [r7, #28]
      A0_Pin = DMUX7_A0_Pin;
 80008cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008d0:	827b      	strh	r3, [r7, #18]
      A1_Port = DMUX7_A1_GPIO_Port;
 80008d2:	4b52      	ldr	r3, [pc, #328]	; (8000a1c <DMUX_dir+0x270>)
 80008d4:	61bb      	str	r3, [r7, #24]
      A1_Pin = DMUX7_A1_Pin;
 80008d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008da:	823b      	strh	r3, [r7, #16]
      EN_Port = DMUX7_EN_GPIO_Port;
 80008dc:	4b4f      	ldr	r3, [pc, #316]	; (8000a1c <DMUX_dir+0x270>)
 80008de:	617b      	str	r3, [r7, #20]
      EN_Pin = DMUX7_EN_Pin;
 80008e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008e4:	81fb      	strh	r3, [r7, #14]
      break;
 80008e6:	e04e      	b.n	8000986 <DMUX_dir+0x1da>
    case 8:
      A0_Port = DMUX8_A0_GPIO_Port;
 80008e8:	4b4b      	ldr	r3, [pc, #300]	; (8000a18 <DMUX_dir+0x26c>)
 80008ea:	61fb      	str	r3, [r7, #28]
      A0_Pin = DMUX8_A0_Pin;
 80008ec:	2302      	movs	r3, #2
 80008ee:	827b      	strh	r3, [r7, #18]
      A1_Port = DMUX8_A1_GPIO_Port;
 80008f0:	4b4c      	ldr	r3, [pc, #304]	; (8000a24 <DMUX_dir+0x278>)
 80008f2:	61bb      	str	r3, [r7, #24]
      A1_Pin = DMUX8_A1_Pin;
 80008f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008f8:	823b      	strh	r3, [r7, #16]
      EN_Port = DMUX8_EN_GPIO_Port;
 80008fa:	4b48      	ldr	r3, [pc, #288]	; (8000a1c <DMUX_dir+0x270>)
 80008fc:	617b      	str	r3, [r7, #20]
      EN_Pin = DMUX8_EN_Pin;
 80008fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000902:	81fb      	strh	r3, [r7, #14]
      break;
 8000904:	e03f      	b.n	8000986 <DMUX_dir+0x1da>
    case 9:
      A0_Port = DMUX9_A0_GPIO_Port;
 8000906:	4b44      	ldr	r3, [pc, #272]	; (8000a18 <DMUX_dir+0x26c>)
 8000908:	61fb      	str	r3, [r7, #28]
      A0_Pin = DMUX9_A0_Pin;
 800090a:	2301      	movs	r3, #1
 800090c:	827b      	strh	r3, [r7, #18]
      A1_Port = DMUX9_A1_GPIO_Port;
 800090e:	4b45      	ldr	r3, [pc, #276]	; (8000a24 <DMUX_dir+0x278>)
 8000910:	61bb      	str	r3, [r7, #24]
      A1_Pin = DMUX9_A1_Pin;
 8000912:	2380      	movs	r3, #128	; 0x80
 8000914:	823b      	strh	r3, [r7, #16]
      EN_Port = DMUX9_EN_GPIO_Port;
 8000916:	4b43      	ldr	r3, [pc, #268]	; (8000a24 <DMUX_dir+0x278>)
 8000918:	617b      	str	r3, [r7, #20]
      EN_Pin = DMUX9_EN_Pin;
 800091a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800091e:	81fb      	strh	r3, [r7, #14]
      break;
 8000920:	e031      	b.n	8000986 <DMUX_dir+0x1da>
    case 10:
      A0_Port = DMUX10_A0_GPIO_Port;
 8000922:	4b40      	ldr	r3, [pc, #256]	; (8000a24 <DMUX_dir+0x278>)
 8000924:	61fb      	str	r3, [r7, #28]
      A0_Pin = DMUX10_A0_Pin;
 8000926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800092a:	827b      	strh	r3, [r7, #18]
      A1_Port = DMUX10_A1_GPIO_Port;
 800092c:	4b3d      	ldr	r3, [pc, #244]	; (8000a24 <DMUX_dir+0x278>)
 800092e:	61bb      	str	r3, [r7, #24]
      A1_Pin = DMUX10_A1_Pin;
 8000930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000934:	823b      	strh	r3, [r7, #16]
      EN_Port = DMUX10_EN_GPIO_Port;
 8000936:	4b3b      	ldr	r3, [pc, #236]	; (8000a24 <DMUX_dir+0x278>)
 8000938:	617b      	str	r3, [r7, #20]
      EN_Pin = DMUX10_EN_Pin;
 800093a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800093e:	81fb      	strh	r3, [r7, #14]
      break;
 8000940:	e021      	b.n	8000986 <DMUX_dir+0x1da>
    case 11:
      A0_Port = DMUX11_A0_GPIO_Port;
 8000942:	4b38      	ldr	r3, [pc, #224]	; (8000a24 <DMUX_dir+0x278>)
 8000944:	61fb      	str	r3, [r7, #28]
      A0_Pin = DMUX11_A0_Pin;
 8000946:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800094a:	827b      	strh	r3, [r7, #18]
      A1_Port = DMUX11_A1_GPIO_Port;
 800094c:	4b35      	ldr	r3, [pc, #212]	; (8000a24 <DMUX_dir+0x278>)
 800094e:	61bb      	str	r3, [r7, #24]
      A1_Pin = DMUX11_A1_Pin;
 8000950:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000954:	823b      	strh	r3, [r7, #16]
      EN_Port = DMUX11_EN_GPIO_Port;
 8000956:	4b33      	ldr	r3, [pc, #204]	; (8000a24 <DMUX_dir+0x278>)
 8000958:	617b      	str	r3, [r7, #20]
      EN_Pin = DMUX11_EN_Pin;
 800095a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800095e:	81fb      	strh	r3, [r7, #14]
      break;
 8000960:	e011      	b.n	8000986 <DMUX_dir+0x1da>
    case 12:
      A0_Port = DMUX12_A0_GPIO_Port;
 8000962:	4b2f      	ldr	r3, [pc, #188]	; (8000a20 <DMUX_dir+0x274>)
 8000964:	61fb      	str	r3, [r7, #28]
      A0_Pin = DMUX12_A0_Pin;
 8000966:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800096a:	827b      	strh	r3, [r7, #18]
      A1_Port = DMUX12_A1_GPIO_Port;
 800096c:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <DMUX_dir+0x274>)
 800096e:	61bb      	str	r3, [r7, #24]
      A1_Pin = DMUX12_A1_Pin;
 8000970:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000974:	823b      	strh	r3, [r7, #16]
      EN_Port = DMUX12_EN_GPIO_Port;
 8000976:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <DMUX_dir+0x268>)
 8000978:	617b      	str	r3, [r7, #20]
      EN_Pin = DMUX12_EN_Pin;
 800097a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800097e:	81fb      	strh	r3, [r7, #14]
      break;
 8000980:	e001      	b.n	8000986 <DMUX_dir+0x1da>
    default:
      return 0;
 8000982:	2300      	movs	r3, #0
 8000984:	e03d      	b.n	8000a02 <DMUX_dir+0x256>
  }

  switch (EN)
 8000986:	797b      	ldrb	r3, [r7, #5]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d01d      	beq.n	80009c8 <DMUX_dir+0x21c>
 800098c:	2b01      	cmp	r3, #1
 800098e:	d137      	bne.n	8000a00 <DMUX_dir+0x254>
  {
    case 1:
    	  // Set the address pins based on Dmux_InSelect
    	  HAL_GPIO_WritePin(A0_Port, A0_Pin, (Dmux_InSelect & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000990:	79bb      	ldrb	r3, [r7, #6]
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	b2da      	uxtb	r2, r3
 8000998:	8a7b      	ldrh	r3, [r7, #18]
 800099a:	4619      	mov	r1, r3
 800099c:	69f8      	ldr	r0, [r7, #28]
 800099e:	f001 f9d7 	bl	8001d50 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(A1_Port, A1_Pin, (Dmux_InSelect & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80009a2:	79bb      	ldrb	r3, [r7, #6]
 80009a4:	105b      	asrs	r3, r3, #1
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	f003 0301 	and.w	r3, r3, #1
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	8a3b      	ldrh	r3, [r7, #16]
 80009b0:	4619      	mov	r1, r3
 80009b2:	69b8      	ldr	r0, [r7, #24]
 80009b4:	f001 f9cc 	bl	8001d50 <HAL_GPIO_WritePin>
    	  // Set the enable pin based on EN
    	  HAL_GPIO_WritePin(EN_Port, EN_Pin, GPIO_PIN_SET);
 80009b8:	89fb      	ldrh	r3, [r7, #14]
 80009ba:	2201      	movs	r2, #1
 80009bc:	4619      	mov	r1, r3
 80009be:	6978      	ldr	r0, [r7, #20]
 80009c0:	f001 f9c6 	bl	8001d50 <HAL_GPIO_WritePin>
    	  return 1;
 80009c4:	2301      	movs	r3, #1
 80009c6:	e01c      	b.n	8000a02 <DMUX_dir+0x256>
    case 0:
    	  // Set the address pins based on Dmux_InSelect
    	  HAL_GPIO_WritePin(A0_Port, A0_Pin, (Dmux_InSelect & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80009c8:	79bb      	ldrb	r3, [r7, #6]
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	8a7b      	ldrh	r3, [r7, #18]
 80009d2:	4619      	mov	r1, r3
 80009d4:	69f8      	ldr	r0, [r7, #28]
 80009d6:	f001 f9bb 	bl	8001d50 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(A1_Port, A1_Pin, (Dmux_InSelect & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80009da:	79bb      	ldrb	r3, [r7, #6]
 80009dc:	105b      	asrs	r3, r3, #1
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	8a3b      	ldrh	r3, [r7, #16]
 80009e8:	4619      	mov	r1, r3
 80009ea:	69b8      	ldr	r0, [r7, #24]
 80009ec:	f001 f9b0 	bl	8001d50 <HAL_GPIO_WritePin>
    	  // Set the enable pin based on EN
    	  HAL_GPIO_WritePin(EN_Port, EN_Pin, GPIO_PIN_RESET);
 80009f0:	89fb      	ldrh	r3, [r7, #14]
 80009f2:	2200      	movs	r2, #0
 80009f4:	4619      	mov	r1, r3
 80009f6:	6978      	ldr	r0, [r7, #20]
 80009f8:	f001 f9aa 	bl	8001d50 <HAL_GPIO_WritePin>
    	  return 1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	e000      	b.n	8000a02 <DMUX_dir+0x256>
    default:
    	return 0;
 8000a00:	2300      	movs	r3, #0
  }
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3720      	adds	r7, #32
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40020000 	.word	0x40020000
 8000a10:	40020800 	.word	0x40020800
 8000a14:	40020c00 	.word	0x40020c00
 8000a18:	40021800 	.word	0x40021800
 8000a1c:	40021400 	.word	0x40021400
 8000a20:	40020400 	.word	0x40020400
 8000a24:	40021000 	.word	0x40021000

08000a28 <MX_GPIO_Init>:
     PD6   ------> USART2_RX
     PB6   ------> I2C1_SCL
     PB7   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08e      	sub	sp, #56	; 0x38
 8000a2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	623b      	str	r3, [r7, #32]
 8000a42:	4bb3      	ldr	r3, [pc, #716]	; (8000d10 <MX_GPIO_Init+0x2e8>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4ab2      	ldr	r2, [pc, #712]	; (8000d10 <MX_GPIO_Init+0x2e8>)
 8000a48:	f043 0310 	orr.w	r3, r3, #16
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4bb0      	ldr	r3, [pc, #704]	; (8000d10 <MX_GPIO_Init+0x2e8>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0310 	and.w	r3, r3, #16
 8000a56:	623b      	str	r3, [r7, #32]
 8000a58:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
 8000a5e:	4bac      	ldr	r3, [pc, #688]	; (8000d10 <MX_GPIO_Init+0x2e8>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4aab      	ldr	r2, [pc, #684]	; (8000d10 <MX_GPIO_Init+0x2e8>)
 8000a64:	f043 0304 	orr.w	r3, r3, #4
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4ba9      	ldr	r3, [pc, #676]	; (8000d10 <MX_GPIO_Init+0x2e8>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0304 	and.w	r3, r3, #4
 8000a72:	61fb      	str	r3, [r7, #28]
 8000a74:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
 8000a7a:	4ba5      	ldr	r3, [pc, #660]	; (8000d10 <MX_GPIO_Init+0x2e8>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4aa4      	ldr	r2, [pc, #656]	; (8000d10 <MX_GPIO_Init+0x2e8>)
 8000a80:	f043 0320 	orr.w	r3, r3, #32
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4ba2      	ldr	r3, [pc, #648]	; (8000d10 <MX_GPIO_Init+0x2e8>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0320 	and.w	r3, r3, #32
 8000a8e:	61bb      	str	r3, [r7, #24]
 8000a90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	4b9e      	ldr	r3, [pc, #632]	; (8000d10 <MX_GPIO_Init+0x2e8>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a9d      	ldr	r2, [pc, #628]	; (8000d10 <MX_GPIO_Init+0x2e8>)
 8000a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b9b      	ldr	r3, [pc, #620]	; (8000d10 <MX_GPIO_Init+0x2e8>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	4b97      	ldr	r3, [pc, #604]	; (8000d10 <MX_GPIO_Init+0x2e8>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a96      	ldr	r2, [pc, #600]	; (8000d10 <MX_GPIO_Init+0x2e8>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b94      	ldr	r3, [pc, #592]	; (8000d10 <MX_GPIO_Init+0x2e8>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	4b90      	ldr	r3, [pc, #576]	; (8000d10 <MX_GPIO_Init+0x2e8>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a8f      	ldr	r2, [pc, #572]	; (8000d10 <MX_GPIO_Init+0x2e8>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b8d      	ldr	r3, [pc, #564]	; (8000d10 <MX_GPIO_Init+0x2e8>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	4b89      	ldr	r3, [pc, #548]	; (8000d10 <MX_GPIO_Init+0x2e8>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a88      	ldr	r2, [pc, #544]	; (8000d10 <MX_GPIO_Init+0x2e8>)
 8000af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b86      	ldr	r3, [pc, #536]	; (8000d10 <MX_GPIO_Init+0x2e8>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	4b82      	ldr	r3, [pc, #520]	; (8000d10 <MX_GPIO_Init+0x2e8>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a81      	ldr	r2, [pc, #516]	; (8000d10 <MX_GPIO_Init+0x2e8>)
 8000b0c:	f043 0308 	orr.w	r3, r3, #8
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b7f      	ldr	r3, [pc, #508]	; (8000d10 <MX_GPIO_Init+0x2e8>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0308 	and.w	r3, r3, #8
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AMUX1_A0_Pin|AMUX2_EN_Pin|AMUX2_A2_Pin|AMUX2_A1_Pin
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b24:	487b      	ldr	r0, [pc, #492]	; (8000d14 <MX_GPIO_Init+0x2ec>)
 8000b26:	f001 f913 	bl	8001d50 <HAL_GPIO_WritePin>
                          |AMUX2_A0_Pin|DMUX9_A1_Pin|DMUX8_A1_Pin|DMUX9_EN_Pin
                          |DMUX10_A0_Pin|DMUX10_EN_Pin|DMUX10_A1_Pin|DMUX11_A1_Pin
                          |DMUX11_A0_Pin|DMUX11_EN_Pin|AMUX0_A1_Pin|AMUX0_A0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AMUX3_EN_Pin|AMUX3_A2_Pin|AMUX3_A1_Pin|DMUX4_EN_Pin
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f24e 313f 	movw	r1, #58175	; 0xe33f
 8000b30:	4879      	ldr	r0, [pc, #484]	; (8000d18 <MX_GPIO_Init+0x2f0>)
 8000b32:	f001 f90d 	bl	8001d50 <HAL_GPIO_WritePin>
                          |DMUX4_A1_Pin|BATTSIM_PSUP_EN_Pin|BON_BATT_EN_Pin|DMUX5_A0_Pin
                          |DMUX6_A1_Pin|DMUX1_A0_Pin|DMUX0_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, AMUX1_A1_Pin|AMUX3_A0_Pin|AMUX4_EN_Pin|AMUX4_A2_Pin
 8000b36:	2200      	movs	r2, #0
 8000b38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b3c:	4877      	ldr	r0, [pc, #476]	; (8000d1c <MX_GPIO_Init+0x2f4>)
 8000b3e:	f001 f907 	bl	8001d50 <HAL_GPIO_WritePin>
                          |AMUX4_A1_Pin|AMUX4_A0_Pin|AMUX1_A2_Pin|AMUX1_EN_Pin
                          |AMUX7_A0_Pin|DMUX3_EN_Pin|DMUX4_A0_Pin|DMUX7_A0_Pin
                          |DMUX6_A0_Pin|DMUX7_A1_Pin|DMUX8_EN_Pin|DMUX7_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LOAD_EN2_Pin|LOAD_EN1_Pin|LOAD_EN0_Pin|DMUX1_A1_Pin
 8000b42:	2200      	movs	r2, #0
 8000b44:	f649 1107 	movw	r1, #39175	; 0x9907
 8000b48:	4875      	ldr	r0, [pc, #468]	; (8000d20 <MX_GPIO_Init+0x2f8>)
 8000b4a:	f001 f901 	bl	8001d50 <HAL_GPIO_WritePin>
                          |DMUX0_A1_Pin|DMUX0_A0_Pin|UART2_SELECT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DMUX5_A1_Pin|DMUX6_EN_Pin|DMUX5_EN_Pin|DMUX12_A1_Pin
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f640 7137 	movw	r1, #3895	; 0xf37
 8000b54:	4873      	ldr	r0, [pc, #460]	; (8000d24 <MX_GPIO_Init+0x2fc>)
 8000b56:	f001 f8fb 	bl	8001d50 <HAL_GPIO_WritePin>
                          |DMUX12_A0_Pin|AMUX7_A1_Pin|AMUX6_EN_Pin|AMUX0_EN_Pin
                          |AMUX0_A2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DMUX9_A0_Pin|DMUX8_A0_Pin|DEVLED_RED_Pin|UART2_EN0_Pin
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b60:	4871      	ldr	r0, [pc, #452]	; (8000d28 <MX_GPIO_Init+0x300>)
 8000b62:	f001 f8f5 	bl	8001d50 <HAL_GPIO_WritePin>
                          |DEVLED_GREEN_Pin|DMUX3_A1_Pin|DMUX3_A0_Pin|DMUX2_EN_Pin
                          |DMUX2_A1_Pin|AMUX6_A1_Pin|AMUX5_A2_Pin|AMUX6_A0_Pin
                          |AMUX5_A1_Pin|AMUX7_EN_Pin|AMUX5_A0_Pin|AMUX7_A2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, UART3_SELECT_Pin|UART3_EN0_Pin|UART3_EN1_Pin|DMUX12_EN_Pin
 8000b66:	2200      	movs	r2, #0
 8000b68:	f64f 419a 	movw	r1, #64666	; 0xfc9a
 8000b6c:	486f      	ldr	r0, [pc, #444]	; (8000d2c <MX_GPIO_Init+0x304>)
 8000b6e:	f001 f8ef 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = AMUX1_A0_Pin|AMUX2_EN_Pin|AMUX2_A2_Pin|AMUX2_A1_Pin
 8000b72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
                          |AMUX2_A0_Pin|DMUX9_A1_Pin|DMUX8_A1_Pin|DMUX9_EN_Pin
                          |DMUX10_A0_Pin|DMUX10_EN_Pin|DMUX10_A1_Pin|DMUX11_A1_Pin
                          |DMUX11_A0_Pin|DMUX11_EN_Pin|AMUX0_A1_Pin|AMUX0_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4862      	ldr	r0, [pc, #392]	; (8000d14 <MX_GPIO_Init+0x2ec>)
 8000b8c:	f000 ff4c 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = AMUX3_EN_Pin|AMUX3_A2_Pin|AMUX3_A1_Pin|DMUX4_EN_Pin
 8000b90:	f24e 333f 	movw	r3, #58175	; 0xe33f
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
                          |DMUX4_A1_Pin|BATTSIM_PSUP_EN_Pin|BON_BATT_EN_Pin|DMUX5_A0_Pin
                          |DMUX6_A1_Pin|DMUX1_A0_Pin|DMUX0_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	485b      	ldr	r0, [pc, #364]	; (8000d18 <MX_GPIO_Init+0x2f0>)
 8000baa:	f000 ff3d 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = AMUX1_A1_Pin|AMUX3_A0_Pin|AMUX4_EN_Pin|AMUX4_A2_Pin
 8000bae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
                          |AMUX4_A1_Pin|AMUX4_A0_Pin|AMUX1_A2_Pin|AMUX1_EN_Pin
                          |AMUX7_A0_Pin|DMUX3_EN_Pin|DMUX4_A0_Pin|DMUX7_A0_Pin
                          |DMUX6_A0_Pin|DMUX7_A1_Pin|DMUX8_EN_Pin|DMUX7_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4855      	ldr	r0, [pc, #340]	; (8000d1c <MX_GPIO_Init+0x2f4>)
 8000bc8:	f000 ff2e 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LOAD_EN2_Pin|LOAD_EN1_Pin|LOAD_EN0_Pin|DMUX1_A1_Pin
 8000bcc:	f649 1307 	movw	r3, #39175	; 0x9907
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
                          |DMUX0_A1_Pin|DMUX0_A0_Pin|UART2_SELECT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be2:	4619      	mov	r1, r3
 8000be4:	484e      	ldr	r0, [pc, #312]	; (8000d20 <MX_GPIO_Init+0x2f8>)
 8000be6:	f000 ff1f 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA6 PA7 */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|SPI1_SCLK_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8000bea:	23f0      	movs	r3, #240	; 0xf0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bfa:	2305      	movs	r3, #5
 8000bfc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c02:	4619      	mov	r1, r3
 8000c04:	4846      	ldr	r0, [pc, #280]	; (8000d20 <MX_GPIO_Init+0x2f8>)
 8000c06:	f000 ff0f 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DMUX5_A1_Pin|DMUX6_EN_Pin|DMUX5_EN_Pin|DMUX12_A1_Pin
 8000c0a:	f640 7337 	movw	r3, #3895	; 0xf37
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DMUX12_A0_Pin|AMUX7_A1_Pin|AMUX6_EN_Pin|AMUX0_EN_Pin
                          |AMUX0_A2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c20:	4619      	mov	r1, r3
 8000c22:	4840      	ldr	r0, [pc, #256]	; (8000d24 <MX_GPIO_Init+0x2fc>)
 8000c24:	f000 ff00 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = DMUX9_A0_Pin|DMUX8_A0_Pin|DEVLED_RED_Pin|UART2_EN0_Pin
 8000c28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
                          |DEVLED_GREEN_Pin|DMUX3_A1_Pin|DMUX3_A0_Pin|DMUX2_EN_Pin
                          |DMUX2_A1_Pin|AMUX6_A1_Pin|AMUX5_A2_Pin|AMUX6_A0_Pin
                          |AMUX5_A1_Pin|AMUX7_EN_Pin|AMUX5_A0_Pin|AMUX7_A2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4839      	ldr	r0, [pc, #228]	; (8000d28 <MX_GPIO_Init+0x300>)
 8000c42:	f000 fef1 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PB14 PB15 */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|SPI2_SCLK_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8000c46:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c58:	2305      	movs	r3, #5
 8000c5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c60:	4619      	mov	r1, r3
 8000c62:	4830      	ldr	r0, [pc, #192]	; (8000d24 <MX_GPIO_Init+0x2fc>)
 8000c64:	f000 fee0 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STM_UART3_TX_Pin|STM_UART3_RX_Pin;
 8000c68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c76:	2303      	movs	r3, #3
 8000c78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c7a:	2307      	movs	r3, #7
 8000c7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	4619      	mov	r1, r3
 8000c84:	4829      	ldr	r0, [pc, #164]	; (8000d2c <MX_GPIO_Init+0x304>)
 8000c86:	f000 fecf 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = UART3_SELECT_Pin|UART3_EN0_Pin|UART3_EN1_Pin|DMUX12_EN_Pin
 8000c8a:	f64f 439a 	movw	r3, #64666	; 0xfc9a
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
                          |UART2_EN1_Pin|UART_SELECTOR_6_7_Pin|DMUX2_A0_Pin|DMUX1_EN_Pin
                          |AMUX6_A2_Pin|AMUX5_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4822      	ldr	r0, [pc, #136]	; (8000d2c <MX_GPIO_Init+0x304>)
 8000ca4:	f000 fec0 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = STM_UART6_TX_Pin|STM_UART6_RX_Pin;
 8000ca8:	23c0      	movs	r3, #192	; 0xc0
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000cb8:	2308      	movs	r3, #8
 8000cba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4815      	ldr	r0, [pc, #84]	; (8000d18 <MX_GPIO_Init+0x2f0>)
 8000cc4:	f000 feb0 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = STM_UART4_TX_Pin|STM_UART4_RX_Pin;
 8000cc8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000cda:	2308      	movs	r3, #8
 8000cdc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	480c      	ldr	r0, [pc, #48]	; (8000d18 <MX_GPIO_Init+0x2f0>)
 8000ce6:	f000 fe9f 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STM_UART5_TX_Pin;
 8000cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000cfc:	2308      	movs	r3, #8
 8000cfe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(STM_UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d04:	4619      	mov	r1, r3
 8000d06:	4804      	ldr	r0, [pc, #16]	; (8000d18 <MX_GPIO_Init+0x2f0>)
 8000d08:	f000 fe8e 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DEV_SW_Pin;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e00f      	b.n	8000d30 <MX_GPIO_Init+0x308>
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40020800 	.word	0x40020800
 8000d1c:	40021400 	.word	0x40021400
 8000d20:	40020000 	.word	0x40020000
 8000d24:	40020400 	.word	0x40020400
 8000d28:	40021800 	.word	0x40021800
 8000d2c:	40020c00 	.word	0x40020c00
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DEV_SW_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3e:	4619      	mov	r1, r3
 8000d40:	481b      	ldr	r0, [pc, #108]	; (8000db0 <MX_GPIO_Init+0x388>)
 8000d42:	f000 fe71 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STM_UART5_RX_Pin;
 8000d46:	2304      	movs	r3, #4
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d52:	2303      	movs	r3, #3
 8000d54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000d56:	2308      	movs	r3, #8
 8000d58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(STM_UART5_RX_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4813      	ldr	r0, [pc, #76]	; (8000db0 <MX_GPIO_Init+0x388>)
 8000d62:	f000 fe61 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STM_UART2_TX_Pin|STM_UART2_RX_Pin;
 8000d66:	2360      	movs	r3, #96	; 0x60
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d72:	2303      	movs	r3, #3
 8000d74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d76:	2307      	movs	r3, #7
 8000d78:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7e:	4619      	mov	r1, r3
 8000d80:	480b      	ldr	r0, [pc, #44]	; (8000db0 <MX_GPIO_Init+0x388>)
 8000d82:	f000 fe51 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d86:	23c0      	movs	r3, #192	; 0xc0
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d8a:	2312      	movs	r3, #18
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d96:	2304      	movs	r3, #4
 8000d98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4804      	ldr	r0, [pc, #16]	; (8000db4 <MX_GPIO_Init+0x38c>)
 8000da2:	f000 fe41 	bl	8001a28 <HAL_GPIO_Init>

}
 8000da6:	bf00      	nop
 8000da8:	3738      	adds	r7, #56	; 0x38
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40020c00 	.word	0x40020c00
 8000db4:	40020400 	.word	0x40020400

08000db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db8:	b590      	push	{r4, r7, lr}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dbe:	f000 fcbf 	bl	8001740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc2:	f000 f823 	bl	8000e0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  //huart1.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8; // Set threshold to 1/8 of the FIFO size
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc6:	f7ff fe2f 	bl	8000a28 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000dca:	f000 fc1d 	bl	8001608 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000dce:	f7ff fcb7 	bl	8000740 <MX_CRC_Init>
   */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
       uint8_t txData[] = "Testing VCP!";
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <main+0x48>)
 8000dd4:	463c      	mov	r4, r7
 8000dd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dd8:	c407      	stmia	r4!, {r0, r1, r2}
 8000dda:	7023      	strb	r3, [r4, #0]

          HAL_UART_Transmit(&huart1, txData, sizeof(txData), HAL_MAX_DELAY);
 8000ddc:	4639      	mov	r1, r7
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	220d      	movs	r2, #13
 8000de4:	4807      	ldr	r0, [pc, #28]	; (8000e04 <main+0x4c>)
 8000de6:	f002 f94c 	bl	8003082 <HAL_UART_Transmit>
       HAL_GPIO_TogglePin(GPIOG, DEVLED_RED_Pin);
 8000dea:	2104      	movs	r1, #4
 8000dec:	4806      	ldr	r0, [pc, #24]	; (8000e08 <main+0x50>)
 8000dee:	f000 ffc8 	bl	8001d82 <HAL_GPIO_TogglePin>
       HAL_GPIO_TogglePin(GPIOG, DEVLED_GREEN_Pin);
 8000df2:	2110      	movs	r1, #16
 8000df4:	4804      	ldr	r0, [pc, #16]	; (8000e08 <main+0x50>)
 8000df6:	f000 ffc4 	bl	8001d82 <HAL_GPIO_TogglePin>
  while (1)
  {

	  UART_Receive_Handler();
 8000dfa:	f000 fa97 	bl	800132c <UART_Receive_Handler>
 8000dfe:	e7fc      	b.n	8000dfa <main+0x42>
 8000e00:	08003920 	.word	0x08003920
 8000e04:	20000184 	.word	0x20000184
 8000e08:	40021800 	.word	0x40021800

08000e0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b094      	sub	sp, #80	; 0x50
 8000e10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	2234      	movs	r2, #52	; 0x34
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f002 fd6c 	bl	80038f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e20:	f107 0308 	add.w	r3, r7, #8
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	4b2c      	ldr	r3, [pc, #176]	; (8000ee8 <SystemClock_Config+0xdc>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	4a2b      	ldr	r2, [pc, #172]	; (8000ee8 <SystemClock_Config+0xdc>)
 8000e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e40:	4b29      	ldr	r3, [pc, #164]	; (8000ee8 <SystemClock_Config+0xdc>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	4b26      	ldr	r3, [pc, #152]	; (8000eec <SystemClock_Config+0xe0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a25      	ldr	r2, [pc, #148]	; (8000eec <SystemClock_Config+0xe0>)
 8000e56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e5a:	6013      	str	r3, [r2, #0]
 8000e5c:	4b23      	ldr	r3, [pc, #140]	; (8000eec <SystemClock_Config+0xe0>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e64:	603b      	str	r3, [r7, #0]
 8000e66:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e70:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e72:	2302      	movs	r3, #2
 8000e74:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000e80:	23b4      	movs	r3, #180	; 0xb4
 8000e82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e84:	2302      	movs	r3, #2
 8000e86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4618      	mov	r0, r3
 8000e96:	f001 fb5b 	bl	8002550 <HAL_RCC_OscConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ea0:	f000 f838 	bl	8000f14 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ea4:	f000 ff88 	bl	8001db8 <HAL_PWREx_EnableOverDrive>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000eae:	f000 f831 	bl	8000f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb2:	230f      	movs	r3, #15
 8000eb4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ebe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ec2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000eca:	f107 0308 	add.w	r3, r7, #8
 8000ece:	2105      	movs	r1, #5
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 ffc1 	bl	8001e58 <HAL_RCC_ClockConfig>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000edc:	f000 f81a 	bl	8000f14 <Error_Handler>
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	3750      	adds	r7, #80	; 0x50
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40007000 	.word	0x40007000

08000ef0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d101      	bne.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f02:	f000 fc3f 	bl	8001784 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40010000 	.word	0x40010000

08000f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f18:	b672      	cpsid	i
}
 8000f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <Error_Handler+0x8>
	...

08000f20 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f24:	f3bf 8f4f 	dsb	sy
}
 8000f28:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <__NVIC_SystemReset+0x24>)
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f32:	4904      	ldr	r1, [pc, #16]	; (8000f44 <__NVIC_SystemReset+0x24>)
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <__NVIC_SystemReset+0x28>)
 8000f36:	4313      	orrs	r3, r2
 8000f38:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f3a:	f3bf 8f4f 	dsb	sy
}
 8000f3e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <__NVIC_SystemReset+0x20>
 8000f44:	e000ed00 	.word	0xe000ed00
 8000f48:	05fa0004 	.word	0x05fa0004

08000f4c <processCommand>:
#define CMD_ACK 0x09

extern UART_HandleTypeDef huart1;

uint8_t processCommand(uint8_t *buffer, uint16_t length)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	807b      	strh	r3, [r7, #2]
    if (length < 7) // Minimum length check
 8000f58:	887b      	ldrh	r3, [r7, #2]
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	d801      	bhi.n	8000f62 <processCommand+0x16>
        return 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e066      	b.n	8001030 <processCommand+0xe4>

    //uint16_t dataLength = (buffer[1] << 8) | buffer[2];
    uint8_t cmd = buffer[3];
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	78db      	ldrb	r3, [r3, #3]
 8000f66:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = &buffer[4];
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	613b      	str	r3, [r7, #16]
    uint8_t value=0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	73fb      	strb	r3, [r7, #15]
    switch (cmd)
 8000f72:	7dfb      	ldrb	r3, [r7, #23]
 8000f74:	2b09      	cmp	r3, #9
 8000f76:	d857      	bhi.n	8001028 <processCommand+0xdc>
 8000f78:	a201      	add	r2, pc, #4	; (adr r2, 8000f80 <processCommand+0x34>)
 8000f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f7e:	bf00      	nop
 8000f80:	08000fa9 	.word	0x08000fa9
 8000f84:	08000fc7 	.word	0x08000fc7
 8000f88:	08000fe5 	.word	0x08000fe5
 8000f8c:	08000fff 	.word	0x08000fff
 8000f90:	0800102d 	.word	0x0800102d
 8000f94:	08001029 	.word	0x08001029
 8000f98:	08001005 	.word	0x08001005
 8000f9c:	08001017 	.word	0x08001017
 8000fa0:	0800102d 	.word	0x0800102d
 8000fa4:	0800102d 	.word	0x0800102d
    {
    case CMD_AMUX:
    	value=AMUX_dir(data[0], data[1],data[2]);
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	7818      	ldrb	r0, [r3, #0]
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	7819      	ldrb	r1, [r3, #0]
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	f7ff faa5 	bl	8000508 <AMUX_dir>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	73fb      	strb	r3, [r7, #15]
    	return value;
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	e034      	b.n	8001030 <processCommand+0xe4>
        break;
    case CMD_DMUX:
    	value=DMUX_dir(data[0], data[1],data[2]);
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	7818      	ldrb	r0, [r3, #0]
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	7819      	ldrb	r1, [r3, #0]
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	f7ff fbe8 	bl	80007ac <DMUX_dir>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	73fb      	strb	r3, [r7, #15]
    	return value;
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	e025      	b.n	8001030 <processCommand+0xe4>
        break;
    case CMD_LOAD:
    	value=handleLoadEnable(data[0], data[1]);
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	781a      	ldrb	r2, [r3, #0]
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	3301      	adds	r3, #1
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	f000 f821 	bl	8001038 <handleLoadEnable>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	73fb      	strb	r3, [r7, #15]
    	return value;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	e018      	b.n	8001030 <processCommand+0xe4>
        break;
    case CMD_RESET:
    	perform_software_reset();
 8000ffe:	f000 f89b 	bl	8001138 <perform_software_reset>
        break;
 8001002:	e014      	b.n	800102e <processCommand+0xe2>
    case CMD_SET_BRIDGE_CONFIG:
        // Implement set bridge config functionality
        break;
    case CMD_BATT_PSUP_EN:
    	value=handleBattPSUPEnable(data[0]);
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f000 f875 	bl	80010f8 <handleBattPSUPEnable>
 800100e:	4603      	mov	r3, r0
 8001010:	73fb      	strb	r3, [r7, #15]
    	return value;
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	e00c      	b.n	8001030 <processCommand+0xe4>
        break;
    case CMD_BATT_SIMM_EN:
    	value=handleBattSimEnable(data[0]);
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f000 f84c 	bl	80010b8 <handleBattSimEnable>
 8001020:	4603      	mov	r3, r0
 8001022:	73fb      	strb	r3, [r7, #15]
    	return value;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	e003      	b.n	8001030 <processCommand+0xe4>
        break;
    case CMD_ACK:
        // Implement ACK functionality
        break;
    default:
        return 0;
 8001028:	2300      	movs	r3, #0
 800102a:	e001      	b.n	8001030 <processCommand+0xe4>
        break;
 800102c:	bf00      	nop
        break;
    }
    return value;
 800102e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <handleLoadEnable>:




uint8_t handleLoadEnable(uint8_t load, uint8_t enable)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	460a      	mov	r2, r1
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	4613      	mov	r3, r2
 8001046:	71bb      	strb	r3, [r7, #6]
	  GPIO_TypeDef* Load_Port;
	  uint16_t Load_Pin;

	  switch (load)
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	2b02      	cmp	r3, #2
 800104c:	d010      	beq.n	8001070 <handleLoadEnable+0x38>
 800104e:	2b02      	cmp	r3, #2
 8001050:	dc13      	bgt.n	800107a <handleLoadEnable+0x42>
 8001052:	2b00      	cmp	r3, #0
 8001054:	d002      	beq.n	800105c <handleLoadEnable+0x24>
 8001056:	2b01      	cmp	r3, #1
 8001058:	d005      	beq.n	8001066 <handleLoadEnable+0x2e>
 800105a:	e00e      	b.n	800107a <handleLoadEnable+0x42>
	  {
	    case 0:
	    	Load_Port=LOAD_EN0_GPIO_Port;
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <handleLoadEnable+0x7c>)
 800105e:	60fb      	str	r3, [r7, #12]
	    	Load_Pin=LOAD_EN0_Pin;
 8001060:	2304      	movs	r3, #4
 8001062:	817b      	strh	r3, [r7, #10]
	        break;
 8001064:	e00b      	b.n	800107e <handleLoadEnable+0x46>
	    case 1:
	    	Load_Port=LOAD_EN1_GPIO_Port;
 8001066:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <handleLoadEnable+0x7c>)
 8001068:	60fb      	str	r3, [r7, #12]
	    	Load_Pin=LOAD_EN1_Pin;
 800106a:	2302      	movs	r3, #2
 800106c:	817b      	strh	r3, [r7, #10]
	    	break;
 800106e:	e006      	b.n	800107e <handleLoadEnable+0x46>
	    case 2:
	    	Load_Port=LOAD_EN2_GPIO_Port;
 8001070:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <handleLoadEnable+0x7c>)
 8001072:	60fb      	str	r3, [r7, #12]
	    	Load_Pin=LOAD_EN2_Pin;
 8001074:	2301      	movs	r3, #1
 8001076:	817b      	strh	r3, [r7, #10]
	    	break;
 8001078:	e001      	b.n	800107e <handleLoadEnable+0x46>
	    default:
	    	return 0;
 800107a:	2300      	movs	r3, #0
 800107c:	e015      	b.n	80010aa <handleLoadEnable+0x72>
	    	break;
	  }
	switch (enable)
 800107e:	79bb      	ldrb	r3, [r7, #6]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d009      	beq.n	8001098 <handleLoadEnable+0x60>
 8001084:	2b01      	cmp	r3, #1
 8001086:	d10f      	bne.n	80010a8 <handleLoadEnable+0x70>
	  {
	    case 1:
	    	HAL_GPIO_WritePin(Load_Port, Load_Pin, GPIO_PIN_SET);
 8001088:	897b      	ldrh	r3, [r7, #10]
 800108a:	2201      	movs	r2, #1
 800108c:	4619      	mov	r1, r3
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f000 fe5e 	bl	8001d50 <HAL_GPIO_WritePin>
	      	return 1;
 8001094:	2301      	movs	r3, #1
 8001096:	e008      	b.n	80010aa <handleLoadEnable+0x72>
	        break;
	    case 0:
	    	HAL_GPIO_WritePin(Load_Port, Load_Pin, GPIO_PIN_RESET);
 8001098:	897b      	ldrh	r3, [r7, #10]
 800109a:	2200      	movs	r2, #0
 800109c:	4619      	mov	r1, r3
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f000 fe56 	bl	8001d50 <HAL_GPIO_WritePin>
	    	return 1;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e000      	b.n	80010aa <handleLoadEnable+0x72>
	    	break;
	    default:
	    	return 0;
 80010a8:	2300      	movs	r3, #0
	    	break;
	  }
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40020000 	.word	0x40020000

080010b8 <handleBattSimEnable>:

uint8_t handleBattSimEnable(uint8_t enable)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
	  switch (enable)
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d008      	beq.n	80010da <handleBattSimEnable+0x22>
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d10d      	bne.n	80010e8 <handleBattSimEnable+0x30>
	  {
	    case 1:
	    	HAL_GPIO_WritePin(BON_BATT_EN_GPIO_Port, BON_BATT_EN_Pin, GPIO_PIN_SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	2108      	movs	r1, #8
 80010d0:	4808      	ldr	r0, [pc, #32]	; (80010f4 <handleBattSimEnable+0x3c>)
 80010d2:	f000 fe3d 	bl	8001d50 <HAL_GPIO_WritePin>
	      	return 1;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e007      	b.n	80010ea <handleBattSimEnable+0x32>
	      	break;
	    case 0:
	    	HAL_GPIO_WritePin(BON_BATT_EN_GPIO_Port, BON_BATT_EN_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	2108      	movs	r1, #8
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <handleBattSimEnable+0x3c>)
 80010e0:	f000 fe36 	bl	8001d50 <HAL_GPIO_WritePin>
	    	return 1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <handleBattSimEnable+0x32>
	    	break;
	    default:
	    	return 0;
 80010e8:	2300      	movs	r3, #0
	    	break;
	  }
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40020800 	.word	0x40020800

080010f8 <handleBattPSUPEnable>:

uint8_t handleBattPSUPEnable(uint8_t enable)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	  switch (enable)
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d008      	beq.n	800111a <handleBattPSUPEnable+0x22>
 8001108:	2b01      	cmp	r3, #1
 800110a:	d10d      	bne.n	8001128 <handleBattPSUPEnable+0x30>
	  {
	    case 1:
	    	HAL_GPIO_WritePin(BATTSIM_PSUP_EN_GPIO_Port, BATTSIM_PSUP_EN_Pin, GPIO_PIN_SET);
 800110c:	2201      	movs	r2, #1
 800110e:	2104      	movs	r1, #4
 8001110:	4808      	ldr	r0, [pc, #32]	; (8001134 <handleBattPSUPEnable+0x3c>)
 8001112:	f000 fe1d 	bl	8001d50 <HAL_GPIO_WritePin>
	    	return 1;
 8001116:	2301      	movs	r3, #1
 8001118:	e007      	b.n	800112a <handleBattPSUPEnable+0x32>
	    	break;
	    case 0:
	    	HAL_GPIO_WritePin(BATTSIM_PSUP_EN_GPIO_Port, BATTSIM_PSUP_EN_Pin, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	2104      	movs	r1, #4
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <handleBattPSUPEnable+0x3c>)
 8001120:	f000 fe16 	bl	8001d50 <HAL_GPIO_WritePin>
	    	return 1;
 8001124:	2301      	movs	r3, #1
 8001126:	e000      	b.n	800112a <handleBattPSUPEnable+0x32>
	    	break;
	    default:
	    	return 0;
 8001128:	2300      	movs	r3, #0
	    	break;
	  }
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40020800 	.word	0x40020800

08001138 <perform_software_reset>:

void perform_software_reset(void) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
	uint8_t ack_message[] = {0x5F, 0x00, 0x00, 0x09, 0x26, 0xA2, 0xF6, 0xE3};
 800113e:	4a07      	ldr	r2, [pc, #28]	; (800115c <perform_software_reset+0x24>)
 8001140:	463b      	mov	r3, r7
 8001142:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001146:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_UART_Transmit(&huart1, ack_message, sizeof(ack_message), HAL_MAX_DELAY);
 800114a:	4639      	mov	r1, r7
 800114c:	f04f 33ff 	mov.w	r3, #4294967295
 8001150:	2208      	movs	r2, #8
 8001152:	4803      	ldr	r0, [pc, #12]	; (8001160 <perform_software_reset+0x28>)
 8001154:	f001 ff95 	bl	8003082 <HAL_UART_Transmit>
    NVIC_SystemReset();  // Trigger a system reset
 8001158:	f7ff fee2 	bl	8000f20 <__NVIC_SystemReset>
 800115c:	08003930 	.word	0x08003930
 8001160:	20000184 	.word	0x20000184

08001164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <HAL_MspInit+0x4c>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	4a0f      	ldr	r2, [pc, #60]	; (80011b0 <HAL_MspInit+0x4c>)
 8001174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001178:	6453      	str	r3, [r2, #68]	; 0x44
 800117a:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <HAL_MspInit+0x4c>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <HAL_MspInit+0x4c>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	4a08      	ldr	r2, [pc, #32]	; (80011b0 <HAL_MspInit+0x4c>)
 8001190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001194:	6413      	str	r3, [r2, #64]	; 0x40
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_MspInit+0x4c>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800

080011b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08c      	sub	sp, #48	; 0x30
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80011bc:	2300      	movs	r3, #0
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011c4:	2300      	movs	r3, #0
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <HAL_InitTick+0xd4>)
 80011ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011cc:	4a2e      	ldr	r2, [pc, #184]	; (8001288 <HAL_InitTick+0xd4>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6453      	str	r3, [r2, #68]	; 0x44
 80011d4:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <HAL_InitTick+0xd4>)
 80011d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011e0:	f107 020c 	add.w	r2, r7, #12
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	4611      	mov	r1, r2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 ff4e 	bl	800208c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80011f0:	f000 ff38 	bl	8002064 <HAL_RCC_GetPCLK2Freq>
 80011f4:	4603      	mov	r3, r0
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011fc:	4a23      	ldr	r2, [pc, #140]	; (800128c <HAL_InitTick+0xd8>)
 80011fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001202:	0c9b      	lsrs	r3, r3, #18
 8001204:	3b01      	subs	r3, #1
 8001206:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001208:	4b21      	ldr	r3, [pc, #132]	; (8001290 <HAL_InitTick+0xdc>)
 800120a:	4a22      	ldr	r2, [pc, #136]	; (8001294 <HAL_InitTick+0xe0>)
 800120c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800120e:	4b20      	ldr	r3, [pc, #128]	; (8001290 <HAL_InitTick+0xdc>)
 8001210:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001214:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001216:	4a1e      	ldr	r2, [pc, #120]	; (8001290 <HAL_InitTick+0xdc>)
 8001218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800121c:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <HAL_InitTick+0xdc>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001222:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <HAL_InitTick+0xdc>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001228:	4b19      	ldr	r3, [pc, #100]	; (8001290 <HAL_InitTick+0xdc>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800122e:	4818      	ldr	r0, [pc, #96]	; (8001290 <HAL_InitTick+0xdc>)
 8001230:	f001 fc2c 	bl	8002a8c <HAL_TIM_Base_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800123a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800123e:	2b00      	cmp	r3, #0
 8001240:	d11b      	bne.n	800127a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001242:	4813      	ldr	r0, [pc, #76]	; (8001290 <HAL_InitTick+0xdc>)
 8001244:	f001 fc7c 	bl	8002b40 <HAL_TIM_Base_Start_IT>
 8001248:	4603      	mov	r3, r0
 800124a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800124e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001252:	2b00      	cmp	r3, #0
 8001254:	d111      	bne.n	800127a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001256:	2019      	movs	r0, #25
 8001258:	f000 fb88 	bl	800196c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b0f      	cmp	r3, #15
 8001260:	d808      	bhi.n	8001274 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001262:	2200      	movs	r2, #0
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	2019      	movs	r0, #25
 8001268:	f000 fb64 	bl	8001934 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800126c:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <HAL_InitTick+0xe4>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	e002      	b.n	800127a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800127a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800127e:	4618      	mov	r0, r3
 8001280:	3730      	adds	r7, #48	; 0x30
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	431bde83 	.word	0x431bde83
 8001290:	20000034 	.word	0x20000034
 8001294:	40010000 	.word	0x40010000
 8001298:	20000008 	.word	0x20000008

0800129c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <NMI_Handler+0x4>

080012a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <HardFault_Handler+0x4>

080012a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <MemManage_Handler+0x4>

080012ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <BusFault_Handler+0x4>

080012b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <UsageFault_Handler+0x4>

080012ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012f8:	4802      	ldr	r0, [pc, #8]	; (8001304 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80012fa:	f001 fc91 	bl	8002c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000034 	.word	0x20000034

08001308 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <SystemInit+0x20>)
 800130e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001312:	4a05      	ldr	r2, [pc, #20]	; (8001328 <SystemInit+0x20>)
 8001314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <UART_Receive_Handler>:
uint16_t dataLen = 0;
bool sofReceived = false;
uint8_t START_OF_FRAME = 0x5F;

void UART_Receive_Handler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
    uint8_t rxByte,ack_received;
    uint8_t ack_message[] = {0x5F, 0x00, 0x00, 0x09, 0x26, 0xA2, 0xF6, 0xE3};
 8001332:	4a65      	ldr	r2, [pc, #404]	; (80014c8 <UART_Receive_Handler+0x19c>)
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	e892 0003 	ldmia.w	r2, {r0, r1}
 800133a:	e883 0003 	stmia.w	r3, {r0, r1}


    if (HAL_UART_Receive(&huart1, &rxByte, 1, HAL_MAX_DELAY) == HAL_OK)
 800133e:	f107 010e 	add.w	r1, r7, #14
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
 8001346:	2201      	movs	r2, #1
 8001348:	4860      	ldr	r0, [pc, #384]	; (80014cc <UART_Receive_Handler+0x1a0>)
 800134a:	f001 ff2c 	bl	80031a6 <HAL_UART_Receive>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	f040 80b4 	bne.w	80014be <UART_Receive_Handler+0x192>
    {
        rxBuffer[rxIndex++] = rxByte;
 8001356:	4b5e      	ldr	r3, [pc, #376]	; (80014d0 <UART_Receive_Handler+0x1a4>)
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	1c5a      	adds	r2, r3, #1
 800135c:	b291      	uxth	r1, r2
 800135e:	4a5c      	ldr	r2, [pc, #368]	; (80014d0 <UART_Receive_Handler+0x1a4>)
 8001360:	8011      	strh	r1, [r2, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	7bb9      	ldrb	r1, [r7, #14]
 8001366:	4b5b      	ldr	r3, [pc, #364]	; (80014d4 <UART_Receive_Handler+0x1a8>)
 8001368:	5499      	strb	r1, [r3, r2]

        if (rxIndex == 1 && rxBuffer[0] == START_OF_FRAME)
 800136a:	4b59      	ldr	r3, [pc, #356]	; (80014d0 <UART_Receive_Handler+0x1a4>)
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d109      	bne.n	8001386 <UART_Receive_Handler+0x5a>
 8001372:	4b58      	ldr	r3, [pc, #352]	; (80014d4 <UART_Receive_Handler+0x1a8>)
 8001374:	781a      	ldrb	r2, [r3, #0]
 8001376:	4b58      	ldr	r3, [pc, #352]	; (80014d8 <UART_Receive_Handler+0x1ac>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	429a      	cmp	r2, r3
 800137c:	d103      	bne.n	8001386 <UART_Receive_Handler+0x5a>
        {
            sofReceived = true;
 800137e:	4b57      	ldr	r3, [pc, #348]	; (80014dc <UART_Receive_Handler+0x1b0>)
 8001380:	2201      	movs	r2, #1
 8001382:	701a      	strb	r2, [r3, #0]
 8001384:	e09b      	b.n	80014be <UART_Receive_Handler+0x192>
        } else if(rxIndex == 1 && rxBuffer[0] != START_OF_FRAME) {
 8001386:	4b52      	ldr	r3, [pc, #328]	; (80014d0 <UART_Receive_Handler+0x1a4>)
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d10c      	bne.n	80013a8 <UART_Receive_Handler+0x7c>
 800138e:	4b51      	ldr	r3, [pc, #324]	; (80014d4 <UART_Receive_Handler+0x1a8>)
 8001390:	781a      	ldrb	r2, [r3, #0]
 8001392:	4b51      	ldr	r3, [pc, #324]	; (80014d8 <UART_Receive_Handler+0x1ac>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	d006      	beq.n	80013a8 <UART_Receive_Handler+0x7c>
        	sofReceived = true;
 800139a:	4b50      	ldr	r3, [pc, #320]	; (80014dc <UART_Receive_Handler+0x1b0>)
 800139c:	2201      	movs	r2, #1
 800139e:	701a      	strb	r2, [r3, #0]
        	rxIndex = 0;
 80013a0:	4b4b      	ldr	r3, [pc, #300]	; (80014d0 <UART_Receive_Handler+0x1a4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	801a      	strh	r2, [r3, #0]
 80013a6:	e08a      	b.n	80014be <UART_Receive_Handler+0x192>
        }
        else if (sofReceived && rxIndex == 3)
 80013a8:	4b4c      	ldr	r3, [pc, #304]	; (80014dc <UART_Receive_Handler+0x1b0>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d018      	beq.n	80013e2 <UART_Receive_Handler+0xb6>
 80013b0:	4b47      	ldr	r3, [pc, #284]	; (80014d0 <UART_Receive_Handler+0x1a4>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	2b03      	cmp	r3, #3
 80013b6:	d114      	bne.n	80013e2 <UART_Receive_Handler+0xb6>
        {
            dataLen = (rxBuffer[1] << 8) | rxBuffer[2];
 80013b8:	4b46      	ldr	r3, [pc, #280]	; (80014d4 <UART_Receive_Handler+0x1a8>)
 80013ba:	785b      	ldrb	r3, [r3, #1]
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	b21a      	sxth	r2, r3
 80013c0:	4b44      	ldr	r3, [pc, #272]	; (80014d4 <UART_Receive_Handler+0x1a8>)
 80013c2:	789b      	ldrb	r3, [r3, #2]
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	4313      	orrs	r3, r2
 80013c8:	b21b      	sxth	r3, r3
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	4b44      	ldr	r3, [pc, #272]	; (80014e0 <UART_Receive_Handler+0x1b4>)
 80013ce:	801a      	strh	r2, [r3, #0]
            if(dataLen>Max_Buffer_Size) {
 80013d0:	4b43      	ldr	r3, [pc, #268]	; (80014e0 <UART_Receive_Handler+0x1b4>)
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013d8:	d971      	bls.n	80014be <UART_Receive_Handler+0x192>
            	sofReceived = false;
 80013da:	4b40      	ldr	r3, [pc, #256]	; (80014dc <UART_Receive_Handler+0x1b0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
            if(dataLen>Max_Buffer_Size) {
 80013e0:	e06d      	b.n	80014be <UART_Receive_Handler+0x192>
            }
        }
        else if (sofReceived && rxIndex >= (4 + dataLen + 4)) // +4 for CRC32
 80013e2:	4b3e      	ldr	r3, [pc, #248]	; (80014dc <UART_Receive_Handler+0x1b0>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d057      	beq.n	800149a <UART_Receive_Handler+0x16e>
 80013ea:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <UART_Receive_Handler+0x1b4>)
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	3307      	adds	r3, #7
 80013f0:	4a37      	ldr	r2, [pc, #220]	; (80014d0 <UART_Receive_Handler+0x1a4>)
 80013f2:	8812      	ldrh	r2, [r2, #0]
 80013f4:	4293      	cmp	r3, r2
 80013f6:	da50      	bge.n	800149a <UART_Receive_Handler+0x16e>
        {
            sofReceived = false;
 80013f8:	4b38      	ldr	r3, [pc, #224]	; (80014dc <UART_Receive_Handler+0x1b0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]

            // Extract the received CRC32 value
            uint32_t receivedCRC = (rxBuffer[4 + dataLen] << 24) | (rxBuffer[4 + dataLen + 1] << 16) |
 80013fe:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <UART_Receive_Handler+0x1b4>)
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	3304      	adds	r3, #4
 8001404:	4a33      	ldr	r2, [pc, #204]	; (80014d4 <UART_Receive_Handler+0x1a8>)
 8001406:	5cd3      	ldrb	r3, [r2, r3]
 8001408:	061a      	lsls	r2, r3, #24
 800140a:	4b35      	ldr	r3, [pc, #212]	; (80014e0 <UART_Receive_Handler+0x1b4>)
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	3305      	adds	r3, #5
 8001410:	4930      	ldr	r1, [pc, #192]	; (80014d4 <UART_Receive_Handler+0x1a8>)
 8001412:	5ccb      	ldrb	r3, [r1, r3]
 8001414:	041b      	lsls	r3, r3, #16
 8001416:	431a      	orrs	r2, r3
                                   (rxBuffer[4 + dataLen + 2] << 8) | rxBuffer[4 + dataLen + 3];
 8001418:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <UART_Receive_Handler+0x1b4>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	3306      	adds	r3, #6
 800141e:	492d      	ldr	r1, [pc, #180]	; (80014d4 <UART_Receive_Handler+0x1a8>)
 8001420:	5ccb      	ldrb	r3, [r1, r3]
 8001422:	021b      	lsls	r3, r3, #8
            uint32_t receivedCRC = (rxBuffer[4 + dataLen] << 24) | (rxBuffer[4 + dataLen + 1] << 16) |
 8001424:	4313      	orrs	r3, r2
                                   (rxBuffer[4 + dataLen + 2] << 8) | rxBuffer[4 + dataLen + 3];
 8001426:	4a2e      	ldr	r2, [pc, #184]	; (80014e0 <UART_Receive_Handler+0x1b4>)
 8001428:	8812      	ldrh	r2, [r2, #0]
 800142a:	3207      	adds	r2, #7
 800142c:	4929      	ldr	r1, [pc, #164]	; (80014d4 <UART_Receive_Handler+0x1a8>)
 800142e:	5c8a      	ldrb	r2, [r1, r2]
 8001430:	4313      	orrs	r3, r2
            uint32_t receivedCRC = (rxBuffer[4 + dataLen] << 24) | (rxBuffer[4 + dataLen + 1] << 16) |
 8001432:	617b      	str	r3, [r7, #20]

            // Calculate the CRC32 for the received data
            uint32_t calculatedCRC = calculateCRC(rxBuffer, 4 + dataLen);
 8001434:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <UART_Receive_Handler+0x1b4>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	3304      	adds	r3, #4
 800143a:	b29b      	uxth	r3, r3
 800143c:	4619      	mov	r1, r3
 800143e:	4825      	ldr	r0, [pc, #148]	; (80014d4 <UART_Receive_Handler+0x1a8>)
 8001440:	f000 f850 	bl	80014e4 <calculateCRC>
 8001444:	6138      	str	r0, [r7, #16]

            if (calculatedCRC == receivedCRC)
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	429a      	cmp	r2, r3
 800144c:	d11b      	bne.n	8001486 <UART_Receive_Handler+0x15a>
            {
            	ack_received=processCommand(rxBuffer, rxIndex);
 800144e:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <UART_Receive_Handler+0x1a4>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	4619      	mov	r1, r3
 8001454:	481f      	ldr	r0, [pc, #124]	; (80014d4 <UART_Receive_Handler+0x1a8>)
 8001456:	f7ff fd79 	bl	8000f4c <processCommand>
 800145a:	4603      	mov	r3, r0
 800145c:	73fb      	strb	r3, [r7, #15]
                if (ack_received == 1) {
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d106      	bne.n	8001472 <UART_Receive_Handler+0x146>
                    HAL_UART_Transmit(&huart1, ack_message, sizeof(ack_message), HAL_MAX_DELAY);
 8001464:	1d39      	adds	r1, r7, #4
 8001466:	f04f 33ff 	mov.w	r3, #4294967295
 800146a:	2208      	movs	r2, #8
 800146c:	4817      	ldr	r0, [pc, #92]	; (80014cc <UART_Receive_Handler+0x1a0>)
 800146e:	f001 fe08 	bl	8003082 <HAL_UART_Transmit>
                }
                rxIndex = 0;
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <UART_Receive_Handler+0x1a4>)
 8001474:	2200      	movs	r2, #0
 8001476:	801a      	strh	r2, [r3, #0]
                memset(rxBuffer, 0, sizeof(rxBuffer));
 8001478:	f44f 7280 	mov.w	r2, #256	; 0x100
 800147c:	2100      	movs	r1, #0
 800147e:	4815      	ldr	r0, [pc, #84]	; (80014d4 <UART_Receive_Handler+0x1a8>)
 8001480:	f002 fa3a 	bl	80038f8 <memset>
        {
 8001484:	e01b      	b.n	80014be <UART_Receive_Handler+0x192>
            }
            else
            {
                rxIndex = 0;
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <UART_Receive_Handler+0x1a4>)
 8001488:	2200      	movs	r2, #0
 800148a:	801a      	strh	r2, [r3, #0]
            	memset(rxBuffer, 0, sizeof(rxBuffer));
 800148c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001490:	2100      	movs	r1, #0
 8001492:	4810      	ldr	r0, [pc, #64]	; (80014d4 <UART_Receive_Handler+0x1a8>)
 8001494:	f002 fa30 	bl	80038f8 <memset>
        {
 8001498:	e011      	b.n	80014be <UART_Receive_Handler+0x192>
            }


        }

        else if (rxIndex >= sizeof(rxBuffer))
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <UART_Receive_Handler+0x1a4>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	2bff      	cmp	r3, #255	; 0xff
 80014a0:	d90d      	bls.n	80014be <UART_Receive_Handler+0x192>
        {
            sofReceived = false;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <UART_Receive_Handler+0x1b0>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
            memset(rxBuffer, 0, rxIndex);
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <UART_Receive_Handler+0x1a4>)
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	2100      	movs	r1, #0
 80014b0:	4808      	ldr	r0, [pc, #32]	; (80014d4 <UART_Receive_Handler+0x1a8>)
 80014b2:	f002 fa21 	bl	80038f8 <memset>
            rxIndex = 0;
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <UART_Receive_Handler+0x1a4>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	801a      	strh	r2, [r3, #0]
        }
    }
}
 80014bc:	e7ff      	b.n	80014be <UART_Receive_Handler+0x192>
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	08003938 	.word	0x08003938
 80014cc:	20000184 	.word	0x20000184
 80014d0:	2000017c 	.word	0x2000017c
 80014d4:	2000007c 	.word	0x2000007c
 80014d8:	20000004 	.word	0x20000004
 80014dc:	20000180 	.word	0x20000180
 80014e0:	2000017e 	.word	0x2000017e

080014e4 <calculateCRC>:

// CRC32-MPEG-2
// Useful page to calculate CRC32 https://crccalc.com/?crc=5F%2000%2002%2002%2000%2001%200000&method=crc-32/mp&datatype=hex&outtype=hex
// In case the buffer length is not a multiple of 4. The progrm does zero padding to perform the CRC32
uint32_t calculateCRC(uint8_t *buffer, uint16_t length)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b0c8      	sub	sp, #288	; 0x120
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80014ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014f2:	6018      	str	r0, [r3, #0]
 80014f4:	460a      	mov	r2, r1
 80014f6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80014fa:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80014fe:	801a      	strh	r2, [r3, #0]
    CRC_HandleTypeDef hcrc;
    hcrc.Instance = CRC;
 8001500:	4b40      	ldr	r3, [pc, #256]	; (8001604 <calculateCRC+0x120>)
 8001502:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108



    // Calculate the number of 32-bit words needed
    uint16_t paddedLength = (length + 3) & ~3; // Round up to the nearest multiple of 4
 8001506:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800150a:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	3303      	adds	r3, #3
 8001512:	b29b      	uxth	r3, r3
 8001514:	f023 0303 	bic.w	r3, r3, #3
 8001518:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114

    // Create a temporary buffer to hold the data
    uint32_t tempBuffer[64]; // Adjust size as needed
    memset(tempBuffer, 0, sizeof(tempBuffer));
 800151c:	f107 0308 	add.w	r3, r7, #8
 8001520:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001524:	2100      	movs	r1, #0
 8001526:	4618      	mov	r0, r3
 8001528:	f002 f9e6 	bl	80038f8 <memset>

    // Copy the data into the temporary buffer
    for (uint16_t i = 0; i < length; i += 4)
 800152c:	2300      	movs	r3, #0
 800152e:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
 8001532:	e048      	b.n	80015c6 <calculateCRC+0xe2>
    {
        uint32_t word = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
        for (uint16_t j = 0; j < 4 && (i + j) < length; ++j)
 800153a:	2300      	movs	r3, #0
 800153c:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 8001540:	e01f      	b.n	8001582 <calculateCRC+0x9e>
        {
            word |= buffer[i + j] << (8 * (3 - j));
 8001542:	f8b7 211e 	ldrh.w	r2, [r7, #286]	; 0x11e
 8001546:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 800154a:	4413      	add	r3, r2
 800154c:	461a      	mov	r2, r3
 800154e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001552:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4413      	add	r3, r2
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001562:	f1c3 0303 	rsb	r3, r3, #3
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	461a      	mov	r2, r3
 800156e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001572:	4313      	orrs	r3, r2
 8001574:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
        for (uint16_t j = 0; j < 4 && (i + j) < length; ++j)
 8001578:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 800157c:	3301      	adds	r3, #1
 800157e:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 8001582:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001586:	2b03      	cmp	r3, #3
 8001588:	d80b      	bhi.n	80015a2 <calculateCRC+0xbe>
 800158a:	f8b7 211e 	ldrh.w	r2, [r7, #286]	; 0x11e
 800158e:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001592:	441a      	add	r2, r3
 8001594:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001598:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	dbcf      	blt.n	8001542 <calculateCRC+0x5e>
        }
        tempBuffer[i / 4] = word;
 80015a2:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 80015a6:	089b      	lsrs	r3, r3, #2
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	4619      	mov	r1, r3
 80015ac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80015b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015b4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80015b8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    for (uint16_t i = 0; i < length; i += 4)
 80015bc:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 80015c0:	3304      	adds	r3, #4
 80015c2:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
 80015c6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80015ca:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80015ce:	f8b7 211e 	ldrh.w	r2, [r7, #286]	; 0x11e
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d3ad      	bcc.n	8001534 <calculateCRC+0x50>
    }


    // Calculate the CRC32
    uint32_t crc = HAL_CRC_Calculate(&hcrc, tempBuffer, paddedLength / 4);
 80015d8:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	b29b      	uxth	r3, r3
 80015e0:	461a      	mov	r2, r3
 80015e2:	f107 0108 	add.w	r1, r7, #8
 80015e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f9e8 	bl	80019c0 <HAL_CRC_Calculate>
 80015f0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    return crc;
 80015f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023000 	.word	0x40023000

08001608 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 800160e:	4a12      	ldr	r2, [pc, #72]	; (8001658 <MX_USART1_UART_Init+0x50>)
 8001610:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001614:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001618:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 800162e:	220c      	movs	r2, #12
 8001630:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001640:	f001 fcd2 	bl	8002fe8 <HAL_UART_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800164a:	f7ff fc63 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000184 	.word	0x20000184
 8001658:	40011000 	.word	0x40011000

0800165c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a19      	ldr	r2, [pc, #100]	; (80016e0 <HAL_UART_MspInit+0x84>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d12c      	bne.n	80016d8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <HAL_UART_MspInit+0x88>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	4a17      	ldr	r2, [pc, #92]	; (80016e4 <HAL_UART_MspInit+0x88>)
 8001688:	f043 0310 	orr.w	r3, r3, #16
 800168c:	6453      	str	r3, [r2, #68]	; 0x44
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <HAL_UART_MspInit+0x88>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f003 0310 	and.w	r3, r3, #16
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <HAL_UART_MspInit+0x88>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a10      	ldr	r2, [pc, #64]	; (80016e4 <HAL_UART_MspInit+0x88>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <HAL_UART_MspInit+0x88>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STM_UART1_TX_Pin|STM_UART1_RX_Pin;
 80016b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c4:	2303      	movs	r3, #3
 80016c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016c8:	2307      	movs	r3, #7
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	4619      	mov	r1, r3
 80016d2:	4805      	ldr	r0, [pc, #20]	; (80016e8 <HAL_UART_MspInit+0x8c>)
 80016d4:	f000 f9a8 	bl	8001a28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80016d8:	bf00      	nop
 80016da:	3728      	adds	r7, #40	; 0x28
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40011000 	.word	0x40011000
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020000 	.word	0x40020000

080016ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001724 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f0:	480d      	ldr	r0, [pc, #52]	; (8001728 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016f2:	490e      	ldr	r1, [pc, #56]	; (800172c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016f4:	4a0e      	ldr	r2, [pc, #56]	; (8001730 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f8:	e002      	b.n	8001700 <LoopCopyDataInit>

080016fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fe:	3304      	adds	r3, #4

08001700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001704:	d3f9      	bcc.n	80016fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001706:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001708:	4c0b      	ldr	r4, [pc, #44]	; (8001738 <LoopFillZerobss+0x26>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800170c:	e001      	b.n	8001712 <LoopFillZerobss>

0800170e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001710:	3204      	adds	r2, #4

08001712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001714:	d3fb      	bcc.n	800170e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001716:	f7ff fdf7 	bl	8001308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800171a:	f002 f8c9 	bl	80038b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800171e:	f7ff fb4b 	bl	8000db8 <main>
  bx  lr    
 8001722:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001724:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800172c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001730:	08003968 	.word	0x08003968
  ldr r2, =_sbss
 8001734:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001738:	200001cc 	.word	0x200001cc

0800173c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800173c:	e7fe      	b.n	800173c <ADC_IRQHandler>
	...

08001740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001744:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <HAL_Init+0x40>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <HAL_Init+0x40>)
 800174a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800174e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <HAL_Init+0x40>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <HAL_Init+0x40>)
 8001756:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800175a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <HAL_Init+0x40>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a07      	ldr	r2, [pc, #28]	; (8001780 <HAL_Init+0x40>)
 8001762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001766:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001768:	2003      	movs	r0, #3
 800176a:	f000 f8d8 	bl	800191e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800176e:	200f      	movs	r0, #15
 8001770:	f7ff fd20 	bl	80011b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001774:	f7ff fcf6 	bl	8001164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023c00 	.word	0x40023c00

08001784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_IncTick+0x20>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x24>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <HAL_IncTick+0x24>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	2000000c 	.word	0x2000000c
 80017a8:	200001c8 	.word	0x200001c8

080017ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <HAL_GetTick+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	200001c8 	.word	0x200001c8

080017c4 <__NVIC_SetPriorityGrouping>:
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e0:	4013      	ands	r3, r2
 80017e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f6:	4a04      	ldr	r2, [pc, #16]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	60d3      	str	r3, [r2, #12]
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_GetPriorityGrouping>:
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <__NVIC_GetPriorityGrouping+0x18>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	f003 0307 	and.w	r3, r3, #7
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_EnableIRQ>:
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	2b00      	cmp	r3, #0
 8001838:	db0b      	blt.n	8001852 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	f003 021f 	and.w	r2, r3, #31
 8001840:	4907      	ldr	r1, [pc, #28]	; (8001860 <__NVIC_EnableIRQ+0x38>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	095b      	lsrs	r3, r3, #5
 8001848:	2001      	movs	r0, #1
 800184a:	fa00 f202 	lsl.w	r2, r0, r2
 800184e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000e100 	.word	0xe000e100

08001864 <__NVIC_SetPriority>:
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	2b00      	cmp	r3, #0
 8001876:	db0a      	blt.n	800188e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	b2da      	uxtb	r2, r3
 800187c:	490c      	ldr	r1, [pc, #48]	; (80018b0 <__NVIC_SetPriority+0x4c>)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	0112      	lsls	r2, r2, #4
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	440b      	add	r3, r1
 8001888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800188c:	e00a      	b.n	80018a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4908      	ldr	r1, [pc, #32]	; (80018b4 <__NVIC_SetPriority+0x50>)
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	3b04      	subs	r3, #4
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	440b      	add	r3, r1
 80018a2:	761a      	strb	r2, [r3, #24]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000e100 	.word	0xe000e100
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <NVIC_EncodePriority>:
{
 80018b8:	b480      	push	{r7}
 80018ba:	b089      	sub	sp, #36	; 0x24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f1c3 0307 	rsb	r3, r3, #7
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	bf28      	it	cs
 80018d6:	2304      	movcs	r3, #4
 80018d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3304      	adds	r3, #4
 80018de:	2b06      	cmp	r3, #6
 80018e0:	d902      	bls.n	80018e8 <NVIC_EncodePriority+0x30>
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3b03      	subs	r3, #3
 80018e6:	e000      	b.n	80018ea <NVIC_EncodePriority+0x32>
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	f04f 32ff 	mov.w	r2, #4294967295
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43da      	mvns	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	401a      	ands	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001900:	f04f 31ff 	mov.w	r1, #4294967295
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	43d9      	mvns	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	4313      	orrs	r3, r2
}
 8001912:	4618      	mov	r0, r3
 8001914:	3724      	adds	r7, #36	; 0x24
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff ff4c 	bl	80017c4 <__NVIC_SetPriorityGrouping>
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
 8001940:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001946:	f7ff ff61 	bl	800180c <__NVIC_GetPriorityGrouping>
 800194a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	68b9      	ldr	r1, [r7, #8]
 8001950:	6978      	ldr	r0, [r7, #20]
 8001952:	f7ff ffb1 	bl	80018b8 <NVIC_EncodePriority>
 8001956:	4602      	mov	r2, r0
 8001958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195c:	4611      	mov	r1, r2
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff ff80 	bl	8001864 <__NVIC_SetPriority>
}
 8001964:	bf00      	nop
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff ff54 	bl	8001828 <__NVIC_EnableIRQ>
}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e00e      	b.n	80019b8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	795b      	ldrb	r3, [r3, #5]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d105      	bne.n	80019b0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7fe fedc 	bl	8000768 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b087      	sub	sp, #28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80019cc:	2300      	movs	r3, #0
 80019ce:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2202      	movs	r2, #2
 80019d4:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f042 0201 	orr.w	r2, r2, #1
 80019e4:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	e00a      	b.n	8001a02 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	441a      	add	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6812      	ldr	r2, [r2, #0]
 80019fa:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	3301      	adds	r3, #1
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d3f0      	bcc.n	80019ec <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2201      	movs	r2, #1
 8001a16:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001a18:	693b      	ldr	r3, [r7, #16]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	371c      	adds	r7, #28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	; 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	e165      	b.n	8001d10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a44:	2201      	movs	r2, #1
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	f040 8154 	bne.w	8001d0a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d005      	beq.n	8001a7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d130      	bne.n	8001adc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f003 0201 	and.w	r2, r3, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	d017      	beq.n	8001b18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	2203      	movs	r2, #3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d123      	bne.n	8001b6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	08da      	lsrs	r2, r3, #3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3208      	adds	r2, #8
 8001b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	220f      	movs	r2, #15
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	08da      	lsrs	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3208      	adds	r2, #8
 8001b66:	69b9      	ldr	r1, [r7, #24]
 8001b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	2203      	movs	r2, #3
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0203 	and.w	r2, r3, #3
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 80ae 	beq.w	8001d0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	4b5d      	ldr	r3, [pc, #372]	; (8001d28 <HAL_GPIO_Init+0x300>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	4a5c      	ldr	r2, [pc, #368]	; (8001d28 <HAL_GPIO_Init+0x300>)
 8001bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bbe:	4b5a      	ldr	r3, [pc, #360]	; (8001d28 <HAL_GPIO_Init+0x300>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bca:	4a58      	ldr	r2, [pc, #352]	; (8001d2c <HAL_GPIO_Init+0x304>)
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	089b      	lsrs	r3, r3, #2
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	220f      	movs	r2, #15
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a4f      	ldr	r2, [pc, #316]	; (8001d30 <HAL_GPIO_Init+0x308>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d025      	beq.n	8001c42 <HAL_GPIO_Init+0x21a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a4e      	ldr	r2, [pc, #312]	; (8001d34 <HAL_GPIO_Init+0x30c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d01f      	beq.n	8001c3e <HAL_GPIO_Init+0x216>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a4d      	ldr	r2, [pc, #308]	; (8001d38 <HAL_GPIO_Init+0x310>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d019      	beq.n	8001c3a <HAL_GPIO_Init+0x212>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a4c      	ldr	r2, [pc, #304]	; (8001d3c <HAL_GPIO_Init+0x314>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d013      	beq.n	8001c36 <HAL_GPIO_Init+0x20e>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4b      	ldr	r2, [pc, #300]	; (8001d40 <HAL_GPIO_Init+0x318>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d00d      	beq.n	8001c32 <HAL_GPIO_Init+0x20a>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4a      	ldr	r2, [pc, #296]	; (8001d44 <HAL_GPIO_Init+0x31c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d007      	beq.n	8001c2e <HAL_GPIO_Init+0x206>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a49      	ldr	r2, [pc, #292]	; (8001d48 <HAL_GPIO_Init+0x320>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d101      	bne.n	8001c2a <HAL_GPIO_Init+0x202>
 8001c26:	2306      	movs	r3, #6
 8001c28:	e00c      	b.n	8001c44 <HAL_GPIO_Init+0x21c>
 8001c2a:	2307      	movs	r3, #7
 8001c2c:	e00a      	b.n	8001c44 <HAL_GPIO_Init+0x21c>
 8001c2e:	2305      	movs	r3, #5
 8001c30:	e008      	b.n	8001c44 <HAL_GPIO_Init+0x21c>
 8001c32:	2304      	movs	r3, #4
 8001c34:	e006      	b.n	8001c44 <HAL_GPIO_Init+0x21c>
 8001c36:	2303      	movs	r3, #3
 8001c38:	e004      	b.n	8001c44 <HAL_GPIO_Init+0x21c>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e002      	b.n	8001c44 <HAL_GPIO_Init+0x21c>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <HAL_GPIO_Init+0x21c>
 8001c42:	2300      	movs	r3, #0
 8001c44:	69fa      	ldr	r2, [r7, #28]
 8001c46:	f002 0203 	and.w	r2, r2, #3
 8001c4a:	0092      	lsls	r2, r2, #2
 8001c4c:	4093      	lsls	r3, r2
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c54:	4935      	ldr	r1, [pc, #212]	; (8001d2c <HAL_GPIO_Init+0x304>)
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	089b      	lsrs	r3, r3, #2
 8001c5a:	3302      	adds	r3, #2
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c62:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <HAL_GPIO_Init+0x324>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c86:	4a31      	ldr	r2, [pc, #196]	; (8001d4c <HAL_GPIO_Init+0x324>)
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c8c:	4b2f      	ldr	r3, [pc, #188]	; (8001d4c <HAL_GPIO_Init+0x324>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cb0:	4a26      	ldr	r2, [pc, #152]	; (8001d4c <HAL_GPIO_Init+0x324>)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cb6:	4b25      	ldr	r3, [pc, #148]	; (8001d4c <HAL_GPIO_Init+0x324>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cda:	4a1c      	ldr	r2, [pc, #112]	; (8001d4c <HAL_GPIO_Init+0x324>)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <HAL_GPIO_Init+0x324>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d04:	4a11      	ldr	r2, [pc, #68]	; (8001d4c <HAL_GPIO_Init+0x324>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	61fb      	str	r3, [r7, #28]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	2b0f      	cmp	r3, #15
 8001d14:	f67f ae96 	bls.w	8001a44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	3724      	adds	r7, #36	; 0x24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40013800 	.word	0x40013800
 8001d30:	40020000 	.word	0x40020000
 8001d34:	40020400 	.word	0x40020400
 8001d38:	40020800 	.word	0x40020800
 8001d3c:	40020c00 	.word	0x40020c00
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40021400 	.word	0x40021400
 8001d48:	40021800 	.word	0x40021800
 8001d4c:	40013c00 	.word	0x40013c00

08001d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	807b      	strh	r3, [r7, #2]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d60:	787b      	ldrb	r3, [r7, #1]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d66:	887a      	ldrh	r2, [r7, #2]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d6c:	e003      	b.n	8001d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d6e:	887b      	ldrh	r3, [r7, #2]
 8001d70:	041a      	lsls	r2, r3, #16
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	619a      	str	r2, [r3, #24]
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b085      	sub	sp, #20
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d94:	887a      	ldrh	r2, [r7, #2]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	041a      	lsls	r2, r3, #16
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	43d9      	mvns	r1, r3
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	400b      	ands	r3, r1
 8001da4:	431a      	orrs	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	619a      	str	r2, [r3, #24]
}
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	603b      	str	r3, [r7, #0]
 8001dc6:	4b20      	ldr	r3, [pc, #128]	; (8001e48 <HAL_PWREx_EnableOverDrive+0x90>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	4a1f      	ldr	r2, [pc, #124]	; (8001e48 <HAL_PWREx_EnableOverDrive+0x90>)
 8001dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd2:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <HAL_PWREx_EnableOverDrive+0x90>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001dde:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <HAL_PWREx_EnableOverDrive+0x94>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001de4:	f7ff fce2 	bl	80017ac <HAL_GetTick>
 8001de8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001dea:	e009      	b.n	8001e00 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001dec:	f7ff fcde 	bl	80017ac <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dfa:	d901      	bls.n	8001e00 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e01f      	b.n	8001e40 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e00:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e0c:	d1ee      	bne.n	8001dec <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e0e:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e14:	f7ff fcca 	bl	80017ac <HAL_GetTick>
 8001e18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e1a:	e009      	b.n	8001e30 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e1c:	f7ff fcc6 	bl	80017ac <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e2a:	d901      	bls.n	8001e30 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e007      	b.n	8001e40 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e30:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e3c:	d1ee      	bne.n	8001e1c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	420e0040 	.word	0x420e0040
 8001e50:	40007000 	.word	0x40007000
 8001e54:	420e0044 	.word	0x420e0044

08001e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0cc      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e6c:	4b68      	ldr	r3, [pc, #416]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 030f 	and.w	r3, r3, #15
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d90c      	bls.n	8001e94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7a:	4b65      	ldr	r3, [pc, #404]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e82:	4b63      	ldr	r3, [pc, #396]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d001      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0b8      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d020      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eac:	4b59      	ldr	r3, [pc, #356]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	4a58      	ldr	r2, [pc, #352]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001eb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ec4:	4b53      	ldr	r3, [pc, #332]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	4a52      	ldr	r2, [pc, #328]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ece:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed0:	4b50      	ldr	r3, [pc, #320]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	494d      	ldr	r1, [pc, #308]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d044      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d107      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef6:	4b47      	ldr	r3, [pc, #284]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d119      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e07f      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d003      	beq.n	8001f16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d107      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f16:	4b3f      	ldr	r3, [pc, #252]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d109      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e06f      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f26:	4b3b      	ldr	r3, [pc, #236]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e067      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f36:	4b37      	ldr	r3, [pc, #220]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f023 0203 	bic.w	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	4934      	ldr	r1, [pc, #208]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f48:	f7ff fc30 	bl	80017ac <HAL_GetTick>
 8001f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4e:	e00a      	b.n	8001f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f50:	f7ff fc2c 	bl	80017ac <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e04f      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f66:	4b2b      	ldr	r3, [pc, #172]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 020c 	and.w	r2, r3, #12
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d1eb      	bne.n	8001f50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f78:	4b25      	ldr	r3, [pc, #148]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 030f 	and.w	r3, r3, #15
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d20c      	bcs.n	8001fa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b22      	ldr	r3, [pc, #136]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8e:	4b20      	ldr	r3, [pc, #128]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e032      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d008      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	4916      	ldr	r1, [pc, #88]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d009      	beq.n	8001fde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	490e      	ldr	r1, [pc, #56]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fde:	f000 f887 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	490a      	ldr	r1, [pc, #40]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff0:	5ccb      	ldrb	r3, [r1, r3]
 8001ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff6:	4a09      	ldr	r2, [pc, #36]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff f8d8 	bl	80011b4 <HAL_InitTick>

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40023c00 	.word	0x40023c00
 8002014:	40023800 	.word	0x40023800
 8002018:	08003940 	.word	0x08003940
 800201c:	20000000 	.word	0x20000000
 8002020:	20000008 	.word	0x20000008

08002024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002028:	4b03      	ldr	r3, [pc, #12]	; (8002038 <HAL_RCC_GetHCLKFreq+0x14>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	20000000 	.word	0x20000000

0800203c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002040:	f7ff fff0 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 8002044:	4602      	mov	r2, r0
 8002046:	4b05      	ldr	r3, [pc, #20]	; (800205c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	0a9b      	lsrs	r3, r3, #10
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	4903      	ldr	r1, [pc, #12]	; (8002060 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002052:	5ccb      	ldrb	r3, [r1, r3]
 8002054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002058:	4618      	mov	r0, r3
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40023800 	.word	0x40023800
 8002060:	08003950 	.word	0x08003950

08002064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002068:	f7ff ffdc 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 800206c:	4602      	mov	r2, r0
 800206e:	4b05      	ldr	r3, [pc, #20]	; (8002084 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	0b5b      	lsrs	r3, r3, #13
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	4903      	ldr	r1, [pc, #12]	; (8002088 <HAL_RCC_GetPCLK2Freq+0x24>)
 800207a:	5ccb      	ldrb	r3, [r1, r3]
 800207c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002080:	4618      	mov	r0, r3
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40023800 	.word	0x40023800
 8002088:	08003950 	.word	0x08003950

0800208c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	220f      	movs	r2, #15
 800209a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_RCC_GetClockConfig+0x5c>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 0203 	and.w	r2, r3, #3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80020a8:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <HAL_RCC_GetClockConfig+0x5c>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <HAL_RCC_GetClockConfig+0x5c>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80020c0:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <HAL_RCC_GetClockConfig+0x5c>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	08db      	lsrs	r3, r3, #3
 80020c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <HAL_RCC_GetClockConfig+0x60>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 020f 	and.w	r2, r3, #15
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	601a      	str	r2, [r3, #0]
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40023c00 	.word	0x40023c00

080020f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020f4:	b0ae      	sub	sp, #184	; 0xb8
 80020f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002116:	4bcb      	ldr	r3, [pc, #812]	; (8002444 <HAL_RCC_GetSysClockFreq+0x354>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b0c      	cmp	r3, #12
 8002120:	f200 8206 	bhi.w	8002530 <HAL_RCC_GetSysClockFreq+0x440>
 8002124:	a201      	add	r2, pc, #4	; (adr r2, 800212c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800212a:	bf00      	nop
 800212c:	08002161 	.word	0x08002161
 8002130:	08002531 	.word	0x08002531
 8002134:	08002531 	.word	0x08002531
 8002138:	08002531 	.word	0x08002531
 800213c:	08002169 	.word	0x08002169
 8002140:	08002531 	.word	0x08002531
 8002144:	08002531 	.word	0x08002531
 8002148:	08002531 	.word	0x08002531
 800214c:	08002171 	.word	0x08002171
 8002150:	08002531 	.word	0x08002531
 8002154:	08002531 	.word	0x08002531
 8002158:	08002531 	.word	0x08002531
 800215c:	08002361 	.word	0x08002361
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002160:	4bb9      	ldr	r3, [pc, #740]	; (8002448 <HAL_RCC_GetSysClockFreq+0x358>)
 8002162:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002166:	e1e7      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002168:	4bb8      	ldr	r3, [pc, #736]	; (800244c <HAL_RCC_GetSysClockFreq+0x35c>)
 800216a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800216e:	e1e3      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002170:	4bb4      	ldr	r3, [pc, #720]	; (8002444 <HAL_RCC_GetSysClockFreq+0x354>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002178:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800217c:	4bb1      	ldr	r3, [pc, #708]	; (8002444 <HAL_RCC_GetSysClockFreq+0x354>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d071      	beq.n	800226c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002188:	4bae      	ldr	r3, [pc, #696]	; (8002444 <HAL_RCC_GetSysClockFreq+0x354>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	099b      	lsrs	r3, r3, #6
 800218e:	2200      	movs	r2, #0
 8002190:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002194:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002198:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800219c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80021a4:	2300      	movs	r3, #0
 80021a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80021aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80021ae:	4622      	mov	r2, r4
 80021b0:	462b      	mov	r3, r5
 80021b2:	f04f 0000 	mov.w	r0, #0
 80021b6:	f04f 0100 	mov.w	r1, #0
 80021ba:	0159      	lsls	r1, r3, #5
 80021bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021c0:	0150      	lsls	r0, r2, #5
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4621      	mov	r1, r4
 80021c8:	1a51      	subs	r1, r2, r1
 80021ca:	6439      	str	r1, [r7, #64]	; 0x40
 80021cc:	4629      	mov	r1, r5
 80021ce:	eb63 0301 	sbc.w	r3, r3, r1
 80021d2:	647b      	str	r3, [r7, #68]	; 0x44
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80021e0:	4649      	mov	r1, r9
 80021e2:	018b      	lsls	r3, r1, #6
 80021e4:	4641      	mov	r1, r8
 80021e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021ea:	4641      	mov	r1, r8
 80021ec:	018a      	lsls	r2, r1, #6
 80021ee:	4641      	mov	r1, r8
 80021f0:	1a51      	subs	r1, r2, r1
 80021f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80021f4:	4649      	mov	r1, r9
 80021f6:	eb63 0301 	sbc.w	r3, r3, r1
 80021fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002208:	4649      	mov	r1, r9
 800220a:	00cb      	lsls	r3, r1, #3
 800220c:	4641      	mov	r1, r8
 800220e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002212:	4641      	mov	r1, r8
 8002214:	00ca      	lsls	r2, r1, #3
 8002216:	4610      	mov	r0, r2
 8002218:	4619      	mov	r1, r3
 800221a:	4603      	mov	r3, r0
 800221c:	4622      	mov	r2, r4
 800221e:	189b      	adds	r3, r3, r2
 8002220:	633b      	str	r3, [r7, #48]	; 0x30
 8002222:	462b      	mov	r3, r5
 8002224:	460a      	mov	r2, r1
 8002226:	eb42 0303 	adc.w	r3, r2, r3
 800222a:	637b      	str	r3, [r7, #52]	; 0x34
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002238:	4629      	mov	r1, r5
 800223a:	024b      	lsls	r3, r1, #9
 800223c:	4621      	mov	r1, r4
 800223e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002242:	4621      	mov	r1, r4
 8002244:	024a      	lsls	r2, r1, #9
 8002246:	4610      	mov	r0, r2
 8002248:	4619      	mov	r1, r3
 800224a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800224e:	2200      	movs	r2, #0
 8002250:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002254:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002258:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800225c:	f7fd ffd2 	bl	8000204 <__aeabi_uldivmod>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	4613      	mov	r3, r2
 8002266:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800226a:	e067      	b.n	800233c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800226c:	4b75      	ldr	r3, [pc, #468]	; (8002444 <HAL_RCC_GetSysClockFreq+0x354>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	099b      	lsrs	r3, r3, #6
 8002272:	2200      	movs	r2, #0
 8002274:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002278:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800227c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002284:	67bb      	str	r3, [r7, #120]	; 0x78
 8002286:	2300      	movs	r3, #0
 8002288:	67fb      	str	r3, [r7, #124]	; 0x7c
 800228a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800228e:	4622      	mov	r2, r4
 8002290:	462b      	mov	r3, r5
 8002292:	f04f 0000 	mov.w	r0, #0
 8002296:	f04f 0100 	mov.w	r1, #0
 800229a:	0159      	lsls	r1, r3, #5
 800229c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022a0:	0150      	lsls	r0, r2, #5
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4621      	mov	r1, r4
 80022a8:	1a51      	subs	r1, r2, r1
 80022aa:	62b9      	str	r1, [r7, #40]	; 0x28
 80022ac:	4629      	mov	r1, r5
 80022ae:	eb63 0301 	sbc.w	r3, r3, r1
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80022c0:	4649      	mov	r1, r9
 80022c2:	018b      	lsls	r3, r1, #6
 80022c4:	4641      	mov	r1, r8
 80022c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022ca:	4641      	mov	r1, r8
 80022cc:	018a      	lsls	r2, r1, #6
 80022ce:	4641      	mov	r1, r8
 80022d0:	ebb2 0a01 	subs.w	sl, r2, r1
 80022d4:	4649      	mov	r1, r9
 80022d6:	eb63 0b01 	sbc.w	fp, r3, r1
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022e6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80022ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022ee:	4692      	mov	sl, r2
 80022f0:	469b      	mov	fp, r3
 80022f2:	4623      	mov	r3, r4
 80022f4:	eb1a 0303 	adds.w	r3, sl, r3
 80022f8:	623b      	str	r3, [r7, #32]
 80022fa:	462b      	mov	r3, r5
 80022fc:	eb4b 0303 	adc.w	r3, fp, r3
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	f04f 0300 	mov.w	r3, #0
 800230a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800230e:	4629      	mov	r1, r5
 8002310:	028b      	lsls	r3, r1, #10
 8002312:	4621      	mov	r1, r4
 8002314:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002318:	4621      	mov	r1, r4
 800231a:	028a      	lsls	r2, r1, #10
 800231c:	4610      	mov	r0, r2
 800231e:	4619      	mov	r1, r3
 8002320:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002324:	2200      	movs	r2, #0
 8002326:	673b      	str	r3, [r7, #112]	; 0x70
 8002328:	677a      	str	r2, [r7, #116]	; 0x74
 800232a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800232e:	f7fd ff69 	bl	8000204 <__aeabi_uldivmod>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4613      	mov	r3, r2
 8002338:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800233c:	4b41      	ldr	r3, [pc, #260]	; (8002444 <HAL_RCC_GetSysClockFreq+0x354>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	0c1b      	lsrs	r3, r3, #16
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	3301      	adds	r3, #1
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800234e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002352:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002356:	fbb2 f3f3 	udiv	r3, r2, r3
 800235a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800235e:	e0eb      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002360:	4b38      	ldr	r3, [pc, #224]	; (8002444 <HAL_RCC_GetSysClockFreq+0x354>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002368:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800236c:	4b35      	ldr	r3, [pc, #212]	; (8002444 <HAL_RCC_GetSysClockFreq+0x354>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d06b      	beq.n	8002450 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002378:	4b32      	ldr	r3, [pc, #200]	; (8002444 <HAL_RCC_GetSysClockFreq+0x354>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	099b      	lsrs	r3, r3, #6
 800237e:	2200      	movs	r2, #0
 8002380:	66bb      	str	r3, [r7, #104]	; 0x68
 8002382:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002384:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800238a:	663b      	str	r3, [r7, #96]	; 0x60
 800238c:	2300      	movs	r3, #0
 800238e:	667b      	str	r3, [r7, #100]	; 0x64
 8002390:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002394:	4622      	mov	r2, r4
 8002396:	462b      	mov	r3, r5
 8002398:	f04f 0000 	mov.w	r0, #0
 800239c:	f04f 0100 	mov.w	r1, #0
 80023a0:	0159      	lsls	r1, r3, #5
 80023a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023a6:	0150      	lsls	r0, r2, #5
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	4621      	mov	r1, r4
 80023ae:	1a51      	subs	r1, r2, r1
 80023b0:	61b9      	str	r1, [r7, #24]
 80023b2:	4629      	mov	r1, r5
 80023b4:	eb63 0301 	sbc.w	r3, r3, r1
 80023b8:	61fb      	str	r3, [r7, #28]
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	f04f 0300 	mov.w	r3, #0
 80023c2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80023c6:	4659      	mov	r1, fp
 80023c8:	018b      	lsls	r3, r1, #6
 80023ca:	4651      	mov	r1, sl
 80023cc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023d0:	4651      	mov	r1, sl
 80023d2:	018a      	lsls	r2, r1, #6
 80023d4:	4651      	mov	r1, sl
 80023d6:	ebb2 0801 	subs.w	r8, r2, r1
 80023da:	4659      	mov	r1, fp
 80023dc:	eb63 0901 	sbc.w	r9, r3, r1
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	f04f 0300 	mov.w	r3, #0
 80023e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023f4:	4690      	mov	r8, r2
 80023f6:	4699      	mov	r9, r3
 80023f8:	4623      	mov	r3, r4
 80023fa:	eb18 0303 	adds.w	r3, r8, r3
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	462b      	mov	r3, r5
 8002402:	eb49 0303 	adc.w	r3, r9, r3
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	f04f 0300 	mov.w	r3, #0
 8002410:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002414:	4629      	mov	r1, r5
 8002416:	024b      	lsls	r3, r1, #9
 8002418:	4621      	mov	r1, r4
 800241a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800241e:	4621      	mov	r1, r4
 8002420:	024a      	lsls	r2, r1, #9
 8002422:	4610      	mov	r0, r2
 8002424:	4619      	mov	r1, r3
 8002426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800242a:	2200      	movs	r2, #0
 800242c:	65bb      	str	r3, [r7, #88]	; 0x58
 800242e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002430:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002434:	f7fd fee6 	bl	8000204 <__aeabi_uldivmod>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4613      	mov	r3, r2
 800243e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002442:	e065      	b.n	8002510 <HAL_RCC_GetSysClockFreq+0x420>
 8002444:	40023800 	.word	0x40023800
 8002448:	00f42400 	.word	0x00f42400
 800244c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002450:	4b3d      	ldr	r3, [pc, #244]	; (8002548 <HAL_RCC_GetSysClockFreq+0x458>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	099b      	lsrs	r3, r3, #6
 8002456:	2200      	movs	r2, #0
 8002458:	4618      	mov	r0, r3
 800245a:	4611      	mov	r1, r2
 800245c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002460:	653b      	str	r3, [r7, #80]	; 0x50
 8002462:	2300      	movs	r3, #0
 8002464:	657b      	str	r3, [r7, #84]	; 0x54
 8002466:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800246a:	4642      	mov	r2, r8
 800246c:	464b      	mov	r3, r9
 800246e:	f04f 0000 	mov.w	r0, #0
 8002472:	f04f 0100 	mov.w	r1, #0
 8002476:	0159      	lsls	r1, r3, #5
 8002478:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800247c:	0150      	lsls	r0, r2, #5
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4641      	mov	r1, r8
 8002484:	1a51      	subs	r1, r2, r1
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	4649      	mov	r1, r9
 800248a:	eb63 0301 	sbc.w	r3, r3, r1
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	f04f 0300 	mov.w	r3, #0
 8002498:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800249c:	4659      	mov	r1, fp
 800249e:	018b      	lsls	r3, r1, #6
 80024a0:	4651      	mov	r1, sl
 80024a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024a6:	4651      	mov	r1, sl
 80024a8:	018a      	lsls	r2, r1, #6
 80024aa:	4651      	mov	r1, sl
 80024ac:	1a54      	subs	r4, r2, r1
 80024ae:	4659      	mov	r1, fp
 80024b0:	eb63 0501 	sbc.w	r5, r3, r1
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	00eb      	lsls	r3, r5, #3
 80024be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024c2:	00e2      	lsls	r2, r4, #3
 80024c4:	4614      	mov	r4, r2
 80024c6:	461d      	mov	r5, r3
 80024c8:	4643      	mov	r3, r8
 80024ca:	18e3      	adds	r3, r4, r3
 80024cc:	603b      	str	r3, [r7, #0]
 80024ce:	464b      	mov	r3, r9
 80024d0:	eb45 0303 	adc.w	r3, r5, r3
 80024d4:	607b      	str	r3, [r7, #4]
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024e2:	4629      	mov	r1, r5
 80024e4:	028b      	lsls	r3, r1, #10
 80024e6:	4621      	mov	r1, r4
 80024e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024ec:	4621      	mov	r1, r4
 80024ee:	028a      	lsls	r2, r1, #10
 80024f0:	4610      	mov	r0, r2
 80024f2:	4619      	mov	r1, r3
 80024f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024f8:	2200      	movs	r2, #0
 80024fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80024fc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80024fe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002502:	f7fd fe7f 	bl	8000204 <__aeabi_uldivmod>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4613      	mov	r3, r2
 800250c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002510:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <HAL_RCC_GetSysClockFreq+0x458>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	0f1b      	lsrs	r3, r3, #28
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800251e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002522:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002526:	fbb2 f3f3 	udiv	r3, r2, r3
 800252a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800252e:	e003      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002532:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002536:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002538:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800253c:	4618      	mov	r0, r3
 800253e:	37b8      	adds	r7, #184	; 0xb8
 8002540:	46bd      	mov	sp, r7
 8002542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002546:	bf00      	nop
 8002548:	40023800 	.word	0x40023800
 800254c:	00f42400 	.word	0x00f42400

08002550 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e28d      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 8083 	beq.w	8002676 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002570:	4b94      	ldr	r3, [pc, #592]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 030c 	and.w	r3, r3, #12
 8002578:	2b04      	cmp	r3, #4
 800257a:	d019      	beq.n	80025b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800257c:	4b91      	ldr	r3, [pc, #580]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002584:	2b08      	cmp	r3, #8
 8002586:	d106      	bne.n	8002596 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002588:	4b8e      	ldr	r3, [pc, #568]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002590:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002594:	d00c      	beq.n	80025b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002596:	4b8b      	ldr	r3, [pc, #556]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800259e:	2b0c      	cmp	r3, #12
 80025a0:	d112      	bne.n	80025c8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025a2:	4b88      	ldr	r3, [pc, #544]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ae:	d10b      	bne.n	80025c8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b0:	4b84      	ldr	r3, [pc, #528]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d05b      	beq.n	8002674 <HAL_RCC_OscConfig+0x124>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d157      	bne.n	8002674 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e25a      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d0:	d106      	bne.n	80025e0 <HAL_RCC_OscConfig+0x90>
 80025d2:	4b7c      	ldr	r3, [pc, #496]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a7b      	ldr	r2, [pc, #492]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 80025d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	e01d      	b.n	800261c <HAL_RCC_OscConfig+0xcc>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025e8:	d10c      	bne.n	8002604 <HAL_RCC_OscConfig+0xb4>
 80025ea:	4b76      	ldr	r3, [pc, #472]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a75      	ldr	r2, [pc, #468]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 80025f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	4b73      	ldr	r3, [pc, #460]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a72      	ldr	r2, [pc, #456]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 80025fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	e00b      	b.n	800261c <HAL_RCC_OscConfig+0xcc>
 8002604:	4b6f      	ldr	r3, [pc, #444]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a6e      	ldr	r2, [pc, #440]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 800260a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	4b6c      	ldr	r3, [pc, #432]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a6b      	ldr	r2, [pc, #428]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 8002616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800261a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d013      	beq.n	800264c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002624:	f7ff f8c2 	bl	80017ac <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800262c:	f7ff f8be 	bl	80017ac <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b64      	cmp	r3, #100	; 0x64
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e21f      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263e:	4b61      	ldr	r3, [pc, #388]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0xdc>
 800264a:	e014      	b.n	8002676 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7ff f8ae 	bl	80017ac <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002654:	f7ff f8aa 	bl	80017ac <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b64      	cmp	r3, #100	; 0x64
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e20b      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002666:	4b57      	ldr	r3, [pc, #348]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x104>
 8002672:	e000      	b.n	8002676 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d06f      	beq.n	8002762 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002682:	4b50      	ldr	r3, [pc, #320]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 030c 	and.w	r3, r3, #12
 800268a:	2b00      	cmp	r3, #0
 800268c:	d017      	beq.n	80026be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800268e:	4b4d      	ldr	r3, [pc, #308]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002696:	2b08      	cmp	r3, #8
 8002698:	d105      	bne.n	80026a6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800269a:	4b4a      	ldr	r3, [pc, #296]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00b      	beq.n	80026be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026a6:	4b47      	ldr	r3, [pc, #284]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80026ae:	2b0c      	cmp	r3, #12
 80026b0:	d11c      	bne.n	80026ec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026b2:	4b44      	ldr	r3, [pc, #272]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d116      	bne.n	80026ec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026be:	4b41      	ldr	r3, [pc, #260]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d005      	beq.n	80026d6 <HAL_RCC_OscConfig+0x186>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d001      	beq.n	80026d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e1d3      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d6:	4b3b      	ldr	r3, [pc, #236]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	4937      	ldr	r1, [pc, #220]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ea:	e03a      	b.n	8002762 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d020      	beq.n	8002736 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026f4:	4b34      	ldr	r3, [pc, #208]	; (80027c8 <HAL_RCC_OscConfig+0x278>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fa:	f7ff f857 	bl	80017ac <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002702:	f7ff f853 	bl	80017ac <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e1b4      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002714:	4b2b      	ldr	r3, [pc, #172]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002720:	4b28      	ldr	r3, [pc, #160]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4925      	ldr	r1, [pc, #148]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 8002730:	4313      	orrs	r3, r2
 8002732:	600b      	str	r3, [r1, #0]
 8002734:	e015      	b.n	8002762 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002736:	4b24      	ldr	r3, [pc, #144]	; (80027c8 <HAL_RCC_OscConfig+0x278>)
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273c:	f7ff f836 	bl	80017ac <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002744:	f7ff f832 	bl	80017ac <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e193      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002756:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f0      	bne.n	8002744 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d036      	beq.n	80027dc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d016      	beq.n	80027a4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002776:	4b15      	ldr	r3, [pc, #84]	; (80027cc <HAL_RCC_OscConfig+0x27c>)
 8002778:	2201      	movs	r2, #1
 800277a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277c:	f7ff f816 	bl	80017ac <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002784:	f7ff f812 	bl	80017ac <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e173      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002796:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 8002798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0x234>
 80027a2:	e01b      	b.n	80027dc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027a4:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_RCC_OscConfig+0x27c>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027aa:	f7fe ffff 	bl	80017ac <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b0:	e00e      	b.n	80027d0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027b2:	f7fe fffb 	bl	80017ac <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d907      	bls.n	80027d0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e15c      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
 80027c4:	40023800 	.word	0x40023800
 80027c8:	42470000 	.word	0x42470000
 80027cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d0:	4b8a      	ldr	r3, [pc, #552]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 80027d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1ea      	bne.n	80027b2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 8097 	beq.w	8002918 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ea:	2300      	movs	r3, #0
 80027ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ee:	4b83      	ldr	r3, [pc, #524]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10f      	bne.n	800281a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	4b7f      	ldr	r3, [pc, #508]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	4a7e      	ldr	r2, [pc, #504]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 8002804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002808:	6413      	str	r3, [r2, #64]	; 0x40
 800280a:	4b7c      	ldr	r3, [pc, #496]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002816:	2301      	movs	r3, #1
 8002818:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281a:	4b79      	ldr	r3, [pc, #484]	; (8002a00 <HAL_RCC_OscConfig+0x4b0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002822:	2b00      	cmp	r3, #0
 8002824:	d118      	bne.n	8002858 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002826:	4b76      	ldr	r3, [pc, #472]	; (8002a00 <HAL_RCC_OscConfig+0x4b0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a75      	ldr	r2, [pc, #468]	; (8002a00 <HAL_RCC_OscConfig+0x4b0>)
 800282c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002832:	f7fe ffbb 	bl	80017ac <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800283a:	f7fe ffb7 	bl	80017ac <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e118      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284c:	4b6c      	ldr	r3, [pc, #432]	; (8002a00 <HAL_RCC_OscConfig+0x4b0>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d106      	bne.n	800286e <HAL_RCC_OscConfig+0x31e>
 8002860:	4b66      	ldr	r3, [pc, #408]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 8002862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002864:	4a65      	ldr	r2, [pc, #404]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	6713      	str	r3, [r2, #112]	; 0x70
 800286c:	e01c      	b.n	80028a8 <HAL_RCC_OscConfig+0x358>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2b05      	cmp	r3, #5
 8002874:	d10c      	bne.n	8002890 <HAL_RCC_OscConfig+0x340>
 8002876:	4b61      	ldr	r3, [pc, #388]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 8002878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287a:	4a60      	ldr	r2, [pc, #384]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 800287c:	f043 0304 	orr.w	r3, r3, #4
 8002880:	6713      	str	r3, [r2, #112]	; 0x70
 8002882:	4b5e      	ldr	r3, [pc, #376]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002886:	4a5d      	ldr	r2, [pc, #372]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6713      	str	r3, [r2, #112]	; 0x70
 800288e:	e00b      	b.n	80028a8 <HAL_RCC_OscConfig+0x358>
 8002890:	4b5a      	ldr	r3, [pc, #360]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 8002892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002894:	4a59      	ldr	r2, [pc, #356]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 8002896:	f023 0301 	bic.w	r3, r3, #1
 800289a:	6713      	str	r3, [r2, #112]	; 0x70
 800289c:	4b57      	ldr	r3, [pc, #348]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 800289e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a0:	4a56      	ldr	r2, [pc, #344]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 80028a2:	f023 0304 	bic.w	r3, r3, #4
 80028a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d015      	beq.n	80028dc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b0:	f7fe ff7c 	bl	80017ac <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b6:	e00a      	b.n	80028ce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b8:	f7fe ff78 	bl	80017ac <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e0d7      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ce:	4b4b      	ldr	r3, [pc, #300]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0ee      	beq.n	80028b8 <HAL_RCC_OscConfig+0x368>
 80028da:	e014      	b.n	8002906 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028dc:	f7fe ff66 	bl	80017ac <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e2:	e00a      	b.n	80028fa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028e4:	f7fe ff62 	bl	80017ac <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e0c1      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028fa:	4b40      	ldr	r3, [pc, #256]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 80028fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1ee      	bne.n	80028e4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002906:	7dfb      	ldrb	r3, [r7, #23]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d105      	bne.n	8002918 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800290c:	4b3b      	ldr	r3, [pc, #236]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	4a3a      	ldr	r2, [pc, #232]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 8002912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002916:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 80ad 	beq.w	8002a7c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002922:	4b36      	ldr	r3, [pc, #216]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	2b08      	cmp	r3, #8
 800292c:	d060      	beq.n	80029f0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d145      	bne.n	80029c2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002936:	4b33      	ldr	r3, [pc, #204]	; (8002a04 <HAL_RCC_OscConfig+0x4b4>)
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7fe ff36 	bl	80017ac <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002944:	f7fe ff32 	bl	80017ac <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e093      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002956:	4b29      	ldr	r3, [pc, #164]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69da      	ldr	r2, [r3, #28]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	019b      	lsls	r3, r3, #6
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002978:	085b      	lsrs	r3, r3, #1
 800297a:	3b01      	subs	r3, #1
 800297c:	041b      	lsls	r3, r3, #16
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	061b      	lsls	r3, r3, #24
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	071b      	lsls	r3, r3, #28
 800298e:	491b      	ldr	r1, [pc, #108]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 8002990:	4313      	orrs	r3, r2
 8002992:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002994:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <HAL_RCC_OscConfig+0x4b4>)
 8002996:	2201      	movs	r2, #1
 8002998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299a:	f7fe ff07 	bl	80017ac <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a2:	f7fe ff03 	bl	80017ac <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e064      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b4:	4b11      	ldr	r3, [pc, #68]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0f0      	beq.n	80029a2 <HAL_RCC_OscConfig+0x452>
 80029c0:	e05c      	b.n	8002a7c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c2:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <HAL_RCC_OscConfig+0x4b4>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c8:	f7fe fef0 	bl	80017ac <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d0:	f7fe feec 	bl	80017ac <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e04d      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e2:	4b06      	ldr	r3, [pc, #24]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0x480>
 80029ee:	e045      	b.n	8002a7c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d107      	bne.n	8002a08 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e040      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40007000 	.word	0x40007000
 8002a04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a08:	4b1f      	ldr	r3, [pc, #124]	; (8002a88 <HAL_RCC_OscConfig+0x538>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d030      	beq.n	8002a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d129      	bne.n	8002a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d122      	bne.n	8002a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a38:	4013      	ands	r3, r2
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d119      	bne.n	8002a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4e:	085b      	lsrs	r3, r3, #1
 8002a50:	3b01      	subs	r3, #1
 8002a52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d10f      	bne.n	8002a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d107      	bne.n	8002a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d001      	beq.n	8002a7c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e000      	b.n	8002a7e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800

08002a8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e041      	b.n	8002b22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d106      	bne.n	8002ab8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f839 	bl	8002b2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4610      	mov	r0, r2
 8002acc:	f000 f9d8 	bl	8002e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
	...

08002b40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d001      	beq.n	8002b58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e04e      	b.n	8002bf6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a23      	ldr	r2, [pc, #140]	; (8002c04 <HAL_TIM_Base_Start_IT+0xc4>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d022      	beq.n	8002bc0 <HAL_TIM_Base_Start_IT+0x80>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b82:	d01d      	beq.n	8002bc0 <HAL_TIM_Base_Start_IT+0x80>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a1f      	ldr	r2, [pc, #124]	; (8002c08 <HAL_TIM_Base_Start_IT+0xc8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d018      	beq.n	8002bc0 <HAL_TIM_Base_Start_IT+0x80>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a1e      	ldr	r2, [pc, #120]	; (8002c0c <HAL_TIM_Base_Start_IT+0xcc>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d013      	beq.n	8002bc0 <HAL_TIM_Base_Start_IT+0x80>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a1c      	ldr	r2, [pc, #112]	; (8002c10 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d00e      	beq.n	8002bc0 <HAL_TIM_Base_Start_IT+0x80>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a1b      	ldr	r2, [pc, #108]	; (8002c14 <HAL_TIM_Base_Start_IT+0xd4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d009      	beq.n	8002bc0 <HAL_TIM_Base_Start_IT+0x80>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a19      	ldr	r2, [pc, #100]	; (8002c18 <HAL_TIM_Base_Start_IT+0xd8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d004      	beq.n	8002bc0 <HAL_TIM_Base_Start_IT+0x80>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a18      	ldr	r2, [pc, #96]	; (8002c1c <HAL_TIM_Base_Start_IT+0xdc>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d111      	bne.n	8002be4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2b06      	cmp	r3, #6
 8002bd0:	d010      	beq.n	8002bf4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f042 0201 	orr.w	r2, r2, #1
 8002be0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be2:	e007      	b.n	8002bf4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0201 	orr.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40010000 	.word	0x40010000
 8002c08:	40000400 	.word	0x40000400
 8002c0c:	40000800 	.word	0x40000800
 8002c10:	40000c00 	.word	0x40000c00
 8002c14:	40010400 	.word	0x40010400
 8002c18:	40014000 	.word	0x40014000
 8002c1c:	40001800 	.word	0x40001800

08002c20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d122      	bne.n	8002c7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d11b      	bne.n	8002c7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f06f 0202 	mvn.w	r2, #2
 8002c4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f8ee 	bl	8002e44 <HAL_TIM_IC_CaptureCallback>
 8002c68:	e005      	b.n	8002c76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f8e0 	bl	8002e30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f8f1 	bl	8002e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d122      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d11b      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0204 	mvn.w	r2, #4
 8002ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f8c4 	bl	8002e44 <HAL_TIM_IC_CaptureCallback>
 8002cbc:	e005      	b.n	8002cca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f8b6 	bl	8002e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f8c7 	bl	8002e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d122      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f003 0308 	and.w	r3, r3, #8
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d11b      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f06f 0208 	mvn.w	r2, #8
 8002cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f89a 	bl	8002e44 <HAL_TIM_IC_CaptureCallback>
 8002d10:	e005      	b.n	8002d1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f88c 	bl	8002e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f89d 	bl	8002e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0310 	and.w	r3, r3, #16
 8002d2e:	2b10      	cmp	r3, #16
 8002d30:	d122      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0310 	and.w	r3, r3, #16
 8002d3c:	2b10      	cmp	r3, #16
 8002d3e:	d11b      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0210 	mvn.w	r2, #16
 8002d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2208      	movs	r2, #8
 8002d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f870 	bl	8002e44 <HAL_TIM_IC_CaptureCallback>
 8002d64:	e005      	b.n	8002d72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f862 	bl	8002e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f873 	bl	8002e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d10e      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d107      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f06f 0201 	mvn.w	r2, #1
 8002d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7fe f8a6 	bl	8000ef0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dae:	2b80      	cmp	r3, #128	; 0x80
 8002db0:	d10e      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbc:	2b80      	cmp	r3, #128	; 0x80
 8002dbe:	d107      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f902 	bl	8002fd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dda:	2b40      	cmp	r3, #64	; 0x40
 8002ddc:	d10e      	bne.n	8002dfc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de8:	2b40      	cmp	r3, #64	; 0x40
 8002dea:	d107      	bne.n	8002dfc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f838 	bl	8002e6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f003 0320 	and.w	r3, r3, #32
 8002e06:	2b20      	cmp	r3, #32
 8002e08:	d10e      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f003 0320 	and.w	r3, r3, #32
 8002e14:	2b20      	cmp	r3, #32
 8002e16:	d107      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f06f 0220 	mvn.w	r2, #32
 8002e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f8cc 	bl	8002fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a40      	ldr	r2, [pc, #256]	; (8002f94 <TIM_Base_SetConfig+0x114>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d013      	beq.n	8002ec0 <TIM_Base_SetConfig+0x40>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e9e:	d00f      	beq.n	8002ec0 <TIM_Base_SetConfig+0x40>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a3d      	ldr	r2, [pc, #244]	; (8002f98 <TIM_Base_SetConfig+0x118>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d00b      	beq.n	8002ec0 <TIM_Base_SetConfig+0x40>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a3c      	ldr	r2, [pc, #240]	; (8002f9c <TIM_Base_SetConfig+0x11c>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d007      	beq.n	8002ec0 <TIM_Base_SetConfig+0x40>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a3b      	ldr	r2, [pc, #236]	; (8002fa0 <TIM_Base_SetConfig+0x120>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d003      	beq.n	8002ec0 <TIM_Base_SetConfig+0x40>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a3a      	ldr	r2, [pc, #232]	; (8002fa4 <TIM_Base_SetConfig+0x124>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d108      	bne.n	8002ed2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a2f      	ldr	r2, [pc, #188]	; (8002f94 <TIM_Base_SetConfig+0x114>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d02b      	beq.n	8002f32 <TIM_Base_SetConfig+0xb2>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee0:	d027      	beq.n	8002f32 <TIM_Base_SetConfig+0xb2>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a2c      	ldr	r2, [pc, #176]	; (8002f98 <TIM_Base_SetConfig+0x118>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d023      	beq.n	8002f32 <TIM_Base_SetConfig+0xb2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a2b      	ldr	r2, [pc, #172]	; (8002f9c <TIM_Base_SetConfig+0x11c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d01f      	beq.n	8002f32 <TIM_Base_SetConfig+0xb2>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a2a      	ldr	r2, [pc, #168]	; (8002fa0 <TIM_Base_SetConfig+0x120>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d01b      	beq.n	8002f32 <TIM_Base_SetConfig+0xb2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a29      	ldr	r2, [pc, #164]	; (8002fa4 <TIM_Base_SetConfig+0x124>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d017      	beq.n	8002f32 <TIM_Base_SetConfig+0xb2>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a28      	ldr	r2, [pc, #160]	; (8002fa8 <TIM_Base_SetConfig+0x128>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d013      	beq.n	8002f32 <TIM_Base_SetConfig+0xb2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a27      	ldr	r2, [pc, #156]	; (8002fac <TIM_Base_SetConfig+0x12c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00f      	beq.n	8002f32 <TIM_Base_SetConfig+0xb2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a26      	ldr	r2, [pc, #152]	; (8002fb0 <TIM_Base_SetConfig+0x130>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00b      	beq.n	8002f32 <TIM_Base_SetConfig+0xb2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a25      	ldr	r2, [pc, #148]	; (8002fb4 <TIM_Base_SetConfig+0x134>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d007      	beq.n	8002f32 <TIM_Base_SetConfig+0xb2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a24      	ldr	r2, [pc, #144]	; (8002fb8 <TIM_Base_SetConfig+0x138>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d003      	beq.n	8002f32 <TIM_Base_SetConfig+0xb2>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a23      	ldr	r2, [pc, #140]	; (8002fbc <TIM_Base_SetConfig+0x13c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d108      	bne.n	8002f44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a0a      	ldr	r2, [pc, #40]	; (8002f94 <TIM_Base_SetConfig+0x114>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d003      	beq.n	8002f78 <TIM_Base_SetConfig+0xf8>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a0c      	ldr	r2, [pc, #48]	; (8002fa4 <TIM_Base_SetConfig+0x124>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d103      	bne.n	8002f80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	615a      	str	r2, [r3, #20]
}
 8002f86:	bf00      	nop
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40010000 	.word	0x40010000
 8002f98:	40000400 	.word	0x40000400
 8002f9c:	40000800 	.word	0x40000800
 8002fa0:	40000c00 	.word	0x40000c00
 8002fa4:	40010400 	.word	0x40010400
 8002fa8:	40014000 	.word	0x40014000
 8002fac:	40014400 	.word	0x40014400
 8002fb0:	40014800 	.word	0x40014800
 8002fb4:	40001800 	.word	0x40001800
 8002fb8:	40001c00 	.word	0x40001c00
 8002fbc:	40002000 	.word	0x40002000

08002fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e03f      	b.n	800307a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7fe fb24 	bl	800165c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2224      	movs	r2, #36	; 0x24
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800302a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f9cb 	bl	80033c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003040:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695a      	ldr	r2, [r3, #20]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003050:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68da      	ldr	r2, [r3, #12]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003060:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b08a      	sub	sp, #40	; 0x28
 8003086:	af02      	add	r7, sp, #8
 8003088:	60f8      	str	r0, [r7, #12]
 800308a:	60b9      	str	r1, [r7, #8]
 800308c:	603b      	str	r3, [r7, #0]
 800308e:	4613      	mov	r3, r2
 8003090:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b20      	cmp	r3, #32
 80030a0:	d17c      	bne.n	800319c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <HAL_UART_Transmit+0x2c>
 80030a8:	88fb      	ldrh	r3, [r7, #6]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e075      	b.n	800319e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_UART_Transmit+0x3e>
 80030bc:	2302      	movs	r3, #2
 80030be:	e06e      	b.n	800319e <HAL_UART_Transmit+0x11c>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2221      	movs	r2, #33	; 0x21
 80030d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030d6:	f7fe fb69 	bl	80017ac <HAL_GetTick>
 80030da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	88fa      	ldrh	r2, [r7, #6]
 80030e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	88fa      	ldrh	r2, [r7, #6]
 80030e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f0:	d108      	bne.n	8003104 <HAL_UART_Transmit+0x82>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d104      	bne.n	8003104 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	61bb      	str	r3, [r7, #24]
 8003102:	e003      	b.n	800310c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003108:	2300      	movs	r3, #0
 800310a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003114:	e02a      	b.n	800316c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2200      	movs	r2, #0
 800311e:	2180      	movs	r1, #128	; 0x80
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 f8e2 	bl	80032ea <UART_WaitOnFlagUntilTimeout>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e036      	b.n	800319e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10b      	bne.n	800314e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	461a      	mov	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003144:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	3302      	adds	r3, #2
 800314a:	61bb      	str	r3, [r7, #24]
 800314c:	e007      	b.n	800315e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	781a      	ldrb	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	3301      	adds	r3, #1
 800315c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1cf      	bne.n	8003116 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2200      	movs	r2, #0
 800317e:	2140      	movs	r1, #64	; 0x40
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 f8b2 	bl	80032ea <UART_WaitOnFlagUntilTimeout>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e006      	b.n	800319e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003198:	2300      	movs	r3, #0
 800319a:	e000      	b.n	800319e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800319c:	2302      	movs	r3, #2
  }
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3720      	adds	r7, #32
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b08a      	sub	sp, #40	; 0x28
 80031aa:	af02      	add	r7, sp, #8
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	603b      	str	r3, [r7, #0]
 80031b2:	4613      	mov	r3, r2
 80031b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b20      	cmp	r3, #32
 80031c4:	f040 808c 	bne.w	80032e0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <HAL_UART_Receive+0x2e>
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e084      	b.n	80032e2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_UART_Receive+0x40>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e07d      	b.n	80032e2 <HAL_UART_Receive+0x13c>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2222      	movs	r2, #34	; 0x22
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003202:	f7fe fad3 	bl	80017ac <HAL_GetTick>
 8003206:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	88fa      	ldrh	r2, [r7, #6]
 800320c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	88fa      	ldrh	r2, [r7, #6]
 8003212:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800321c:	d108      	bne.n	8003230 <HAL_UART_Receive+0x8a>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d104      	bne.n	8003230 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003226:	2300      	movs	r3, #0
 8003228:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	e003      	b.n	8003238 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003234:	2300      	movs	r3, #0
 8003236:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003240:	e043      	b.n	80032ca <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2200      	movs	r2, #0
 800324a:	2120      	movs	r1, #32
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 f84c 	bl	80032ea <UART_WaitOnFlagUntilTimeout>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e042      	b.n	80032e2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10c      	bne.n	800327c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	b29b      	uxth	r3, r3
 800326a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800326e:	b29a      	uxth	r2, r3
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	3302      	adds	r3, #2
 8003278:	61bb      	str	r3, [r7, #24]
 800327a:	e01f      	b.n	80032bc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003284:	d007      	beq.n	8003296 <HAL_UART_Receive+0xf0>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10a      	bne.n	80032a4 <HAL_UART_Receive+0xfe>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	b2da      	uxtb	r2, r3
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	701a      	strb	r2, [r3, #0]
 80032a2:	e008      	b.n	80032b6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	3301      	adds	r3, #1
 80032ba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1b6      	bne.n	8003242 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	e000      	b.n	80032e2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80032e0:	2302      	movs	r3, #2
  }
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3720      	adds	r7, #32
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b090      	sub	sp, #64	; 0x40
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	603b      	str	r3, [r7, #0]
 80032f6:	4613      	mov	r3, r2
 80032f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032fa:	e050      	b.n	800339e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003302:	d04c      	beq.n	800339e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003306:	2b00      	cmp	r3, #0
 8003308:	d007      	beq.n	800331a <UART_WaitOnFlagUntilTimeout+0x30>
 800330a:	f7fe fa4f 	bl	80017ac <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003316:	429a      	cmp	r2, r3
 8003318:	d241      	bcs.n	800339e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	330c      	adds	r3, #12
 8003320:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003324:	e853 3f00 	ldrex	r3, [r3]
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003330:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	330c      	adds	r3, #12
 8003338:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800333a:	637a      	str	r2, [r7, #52]	; 0x34
 800333c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003340:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003342:	e841 2300 	strex	r3, r2, [r1]
 8003346:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1e5      	bne.n	800331a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3314      	adds	r3, #20
 8003354:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	e853 3f00 	ldrex	r3, [r3]
 800335c:	613b      	str	r3, [r7, #16]
   return(result);
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	63bb      	str	r3, [r7, #56]	; 0x38
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3314      	adds	r3, #20
 800336c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800336e:	623a      	str	r2, [r7, #32]
 8003370:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003372:	69f9      	ldr	r1, [r7, #28]
 8003374:	6a3a      	ldr	r2, [r7, #32]
 8003376:	e841 2300 	strex	r3, r2, [r1]
 800337a:	61bb      	str	r3, [r7, #24]
   return(result);
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1e5      	bne.n	800334e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e00f      	b.n	80033be <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4013      	ands	r3, r2
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	bf0c      	ite	eq
 80033ae:	2301      	moveq	r3, #1
 80033b0:	2300      	movne	r3, #0
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d09f      	beq.n	80032fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3740      	adds	r7, #64	; 0x40
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033cc:	b0c0      	sub	sp, #256	; 0x100
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e4:	68d9      	ldr	r1, [r3, #12]
 80033e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	ea40 0301 	orr.w	r3, r0, r1
 80033f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	431a      	orrs	r2, r3
 8003400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	431a      	orrs	r2, r3
 8003408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003420:	f021 010c 	bic.w	r1, r1, #12
 8003424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800342e:	430b      	orrs	r3, r1
 8003430:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800343e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003442:	6999      	ldr	r1, [r3, #24]
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	ea40 0301 	orr.w	r3, r0, r1
 800344e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	4b8f      	ldr	r3, [pc, #572]	; (8003694 <UART_SetConfig+0x2cc>)
 8003458:	429a      	cmp	r2, r3
 800345a:	d005      	beq.n	8003468 <UART_SetConfig+0xa0>
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	4b8d      	ldr	r3, [pc, #564]	; (8003698 <UART_SetConfig+0x2d0>)
 8003464:	429a      	cmp	r2, r3
 8003466:	d104      	bne.n	8003472 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003468:	f7fe fdfc 	bl	8002064 <HAL_RCC_GetPCLK2Freq>
 800346c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003470:	e003      	b.n	800347a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003472:	f7fe fde3 	bl	800203c <HAL_RCC_GetPCLK1Freq>
 8003476:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800347a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003484:	f040 810c 	bne.w	80036a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800348c:	2200      	movs	r2, #0
 800348e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003492:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003496:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800349a:	4622      	mov	r2, r4
 800349c:	462b      	mov	r3, r5
 800349e:	1891      	adds	r1, r2, r2
 80034a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80034a2:	415b      	adcs	r3, r3
 80034a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034aa:	4621      	mov	r1, r4
 80034ac:	eb12 0801 	adds.w	r8, r2, r1
 80034b0:	4629      	mov	r1, r5
 80034b2:	eb43 0901 	adc.w	r9, r3, r1
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034ca:	4690      	mov	r8, r2
 80034cc:	4699      	mov	r9, r3
 80034ce:	4623      	mov	r3, r4
 80034d0:	eb18 0303 	adds.w	r3, r8, r3
 80034d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034d8:	462b      	mov	r3, r5
 80034da:	eb49 0303 	adc.w	r3, r9, r3
 80034de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034f6:	460b      	mov	r3, r1
 80034f8:	18db      	adds	r3, r3, r3
 80034fa:	653b      	str	r3, [r7, #80]	; 0x50
 80034fc:	4613      	mov	r3, r2
 80034fe:	eb42 0303 	adc.w	r3, r2, r3
 8003502:	657b      	str	r3, [r7, #84]	; 0x54
 8003504:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003508:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800350c:	f7fc fe7a 	bl	8000204 <__aeabi_uldivmod>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4b61      	ldr	r3, [pc, #388]	; (800369c <UART_SetConfig+0x2d4>)
 8003516:	fba3 2302 	umull	r2, r3, r3, r2
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	011c      	lsls	r4, r3, #4
 800351e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003522:	2200      	movs	r2, #0
 8003524:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003528:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800352c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003530:	4642      	mov	r2, r8
 8003532:	464b      	mov	r3, r9
 8003534:	1891      	adds	r1, r2, r2
 8003536:	64b9      	str	r1, [r7, #72]	; 0x48
 8003538:	415b      	adcs	r3, r3
 800353a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800353c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003540:	4641      	mov	r1, r8
 8003542:	eb12 0a01 	adds.w	sl, r2, r1
 8003546:	4649      	mov	r1, r9
 8003548:	eb43 0b01 	adc.w	fp, r3, r1
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003558:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800355c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003560:	4692      	mov	sl, r2
 8003562:	469b      	mov	fp, r3
 8003564:	4643      	mov	r3, r8
 8003566:	eb1a 0303 	adds.w	r3, sl, r3
 800356a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800356e:	464b      	mov	r3, r9
 8003570:	eb4b 0303 	adc.w	r3, fp, r3
 8003574:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003584:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003588:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800358c:	460b      	mov	r3, r1
 800358e:	18db      	adds	r3, r3, r3
 8003590:	643b      	str	r3, [r7, #64]	; 0x40
 8003592:	4613      	mov	r3, r2
 8003594:	eb42 0303 	adc.w	r3, r2, r3
 8003598:	647b      	str	r3, [r7, #68]	; 0x44
 800359a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800359e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035a2:	f7fc fe2f 	bl	8000204 <__aeabi_uldivmod>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4611      	mov	r1, r2
 80035ac:	4b3b      	ldr	r3, [pc, #236]	; (800369c <UART_SetConfig+0x2d4>)
 80035ae:	fba3 2301 	umull	r2, r3, r3, r1
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	2264      	movs	r2, #100	; 0x64
 80035b6:	fb02 f303 	mul.w	r3, r2, r3
 80035ba:	1acb      	subs	r3, r1, r3
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80035c2:	4b36      	ldr	r3, [pc, #216]	; (800369c <UART_SetConfig+0x2d4>)
 80035c4:	fba3 2302 	umull	r2, r3, r3, r2
 80035c8:	095b      	lsrs	r3, r3, #5
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035d0:	441c      	add	r4, r3
 80035d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035d6:	2200      	movs	r2, #0
 80035d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80035e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80035e4:	4642      	mov	r2, r8
 80035e6:	464b      	mov	r3, r9
 80035e8:	1891      	adds	r1, r2, r2
 80035ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80035ec:	415b      	adcs	r3, r3
 80035ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035f4:	4641      	mov	r1, r8
 80035f6:	1851      	adds	r1, r2, r1
 80035f8:	6339      	str	r1, [r7, #48]	; 0x30
 80035fa:	4649      	mov	r1, r9
 80035fc:	414b      	adcs	r3, r1
 80035fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800360c:	4659      	mov	r1, fp
 800360e:	00cb      	lsls	r3, r1, #3
 8003610:	4651      	mov	r1, sl
 8003612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003616:	4651      	mov	r1, sl
 8003618:	00ca      	lsls	r2, r1, #3
 800361a:	4610      	mov	r0, r2
 800361c:	4619      	mov	r1, r3
 800361e:	4603      	mov	r3, r0
 8003620:	4642      	mov	r2, r8
 8003622:	189b      	adds	r3, r3, r2
 8003624:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003628:	464b      	mov	r3, r9
 800362a:	460a      	mov	r2, r1
 800362c:	eb42 0303 	adc.w	r3, r2, r3
 8003630:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003640:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003644:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003648:	460b      	mov	r3, r1
 800364a:	18db      	adds	r3, r3, r3
 800364c:	62bb      	str	r3, [r7, #40]	; 0x28
 800364e:	4613      	mov	r3, r2
 8003650:	eb42 0303 	adc.w	r3, r2, r3
 8003654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003656:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800365a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800365e:	f7fc fdd1 	bl	8000204 <__aeabi_uldivmod>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4b0d      	ldr	r3, [pc, #52]	; (800369c <UART_SetConfig+0x2d4>)
 8003668:	fba3 1302 	umull	r1, r3, r3, r2
 800366c:	095b      	lsrs	r3, r3, #5
 800366e:	2164      	movs	r1, #100	; 0x64
 8003670:	fb01 f303 	mul.w	r3, r1, r3
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	3332      	adds	r3, #50	; 0x32
 800367a:	4a08      	ldr	r2, [pc, #32]	; (800369c <UART_SetConfig+0x2d4>)
 800367c:	fba2 2303 	umull	r2, r3, r2, r3
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	f003 0207 	and.w	r2, r3, #7
 8003686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4422      	add	r2, r4
 800368e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003690:	e105      	b.n	800389e <UART_SetConfig+0x4d6>
 8003692:	bf00      	nop
 8003694:	40011000 	.word	0x40011000
 8003698:	40011400 	.word	0x40011400
 800369c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036a4:	2200      	movs	r2, #0
 80036a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80036ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80036b2:	4642      	mov	r2, r8
 80036b4:	464b      	mov	r3, r9
 80036b6:	1891      	adds	r1, r2, r2
 80036b8:	6239      	str	r1, [r7, #32]
 80036ba:	415b      	adcs	r3, r3
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
 80036be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036c2:	4641      	mov	r1, r8
 80036c4:	1854      	adds	r4, r2, r1
 80036c6:	4649      	mov	r1, r9
 80036c8:	eb43 0501 	adc.w	r5, r3, r1
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	00eb      	lsls	r3, r5, #3
 80036d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036da:	00e2      	lsls	r2, r4, #3
 80036dc:	4614      	mov	r4, r2
 80036de:	461d      	mov	r5, r3
 80036e0:	4643      	mov	r3, r8
 80036e2:	18e3      	adds	r3, r4, r3
 80036e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036e8:	464b      	mov	r3, r9
 80036ea:	eb45 0303 	adc.w	r3, r5, r3
 80036ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800370e:	4629      	mov	r1, r5
 8003710:	008b      	lsls	r3, r1, #2
 8003712:	4621      	mov	r1, r4
 8003714:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003718:	4621      	mov	r1, r4
 800371a:	008a      	lsls	r2, r1, #2
 800371c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003720:	f7fc fd70 	bl	8000204 <__aeabi_uldivmod>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	4b60      	ldr	r3, [pc, #384]	; (80038ac <UART_SetConfig+0x4e4>)
 800372a:	fba3 2302 	umull	r2, r3, r3, r2
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	011c      	lsls	r4, r3, #4
 8003732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003736:	2200      	movs	r2, #0
 8003738:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800373c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003740:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003744:	4642      	mov	r2, r8
 8003746:	464b      	mov	r3, r9
 8003748:	1891      	adds	r1, r2, r2
 800374a:	61b9      	str	r1, [r7, #24]
 800374c:	415b      	adcs	r3, r3
 800374e:	61fb      	str	r3, [r7, #28]
 8003750:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003754:	4641      	mov	r1, r8
 8003756:	1851      	adds	r1, r2, r1
 8003758:	6139      	str	r1, [r7, #16]
 800375a:	4649      	mov	r1, r9
 800375c:	414b      	adcs	r3, r1
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800376c:	4659      	mov	r1, fp
 800376e:	00cb      	lsls	r3, r1, #3
 8003770:	4651      	mov	r1, sl
 8003772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003776:	4651      	mov	r1, sl
 8003778:	00ca      	lsls	r2, r1, #3
 800377a:	4610      	mov	r0, r2
 800377c:	4619      	mov	r1, r3
 800377e:	4603      	mov	r3, r0
 8003780:	4642      	mov	r2, r8
 8003782:	189b      	adds	r3, r3, r2
 8003784:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003788:	464b      	mov	r3, r9
 800378a:	460a      	mov	r2, r1
 800378c:	eb42 0303 	adc.w	r3, r2, r3
 8003790:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	67bb      	str	r3, [r7, #120]	; 0x78
 800379e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80037ac:	4649      	mov	r1, r9
 80037ae:	008b      	lsls	r3, r1, #2
 80037b0:	4641      	mov	r1, r8
 80037b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037b6:	4641      	mov	r1, r8
 80037b8:	008a      	lsls	r2, r1, #2
 80037ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037be:	f7fc fd21 	bl	8000204 <__aeabi_uldivmod>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4b39      	ldr	r3, [pc, #228]	; (80038ac <UART_SetConfig+0x4e4>)
 80037c8:	fba3 1302 	umull	r1, r3, r3, r2
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	2164      	movs	r1, #100	; 0x64
 80037d0:	fb01 f303 	mul.w	r3, r1, r3
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	3332      	adds	r3, #50	; 0x32
 80037da:	4a34      	ldr	r2, [pc, #208]	; (80038ac <UART_SetConfig+0x4e4>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	095b      	lsrs	r3, r3, #5
 80037e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037e6:	441c      	add	r4, r3
 80037e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ec:	2200      	movs	r2, #0
 80037ee:	673b      	str	r3, [r7, #112]	; 0x70
 80037f0:	677a      	str	r2, [r7, #116]	; 0x74
 80037f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80037f6:	4642      	mov	r2, r8
 80037f8:	464b      	mov	r3, r9
 80037fa:	1891      	adds	r1, r2, r2
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	415b      	adcs	r3, r3
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003806:	4641      	mov	r1, r8
 8003808:	1851      	adds	r1, r2, r1
 800380a:	6039      	str	r1, [r7, #0]
 800380c:	4649      	mov	r1, r9
 800380e:	414b      	adcs	r3, r1
 8003810:	607b      	str	r3, [r7, #4]
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800381e:	4659      	mov	r1, fp
 8003820:	00cb      	lsls	r3, r1, #3
 8003822:	4651      	mov	r1, sl
 8003824:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003828:	4651      	mov	r1, sl
 800382a:	00ca      	lsls	r2, r1, #3
 800382c:	4610      	mov	r0, r2
 800382e:	4619      	mov	r1, r3
 8003830:	4603      	mov	r3, r0
 8003832:	4642      	mov	r2, r8
 8003834:	189b      	adds	r3, r3, r2
 8003836:	66bb      	str	r3, [r7, #104]	; 0x68
 8003838:	464b      	mov	r3, r9
 800383a:	460a      	mov	r2, r1
 800383c:	eb42 0303 	adc.w	r3, r2, r3
 8003840:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	663b      	str	r3, [r7, #96]	; 0x60
 800384c:	667a      	str	r2, [r7, #100]	; 0x64
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800385a:	4649      	mov	r1, r9
 800385c:	008b      	lsls	r3, r1, #2
 800385e:	4641      	mov	r1, r8
 8003860:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003864:	4641      	mov	r1, r8
 8003866:	008a      	lsls	r2, r1, #2
 8003868:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800386c:	f7fc fcca 	bl	8000204 <__aeabi_uldivmod>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4b0d      	ldr	r3, [pc, #52]	; (80038ac <UART_SetConfig+0x4e4>)
 8003876:	fba3 1302 	umull	r1, r3, r3, r2
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	2164      	movs	r1, #100	; 0x64
 800387e:	fb01 f303 	mul.w	r3, r1, r3
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	3332      	adds	r3, #50	; 0x32
 8003888:	4a08      	ldr	r2, [pc, #32]	; (80038ac <UART_SetConfig+0x4e4>)
 800388a:	fba2 2303 	umull	r2, r3, r2, r3
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	f003 020f 	and.w	r2, r3, #15
 8003894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4422      	add	r2, r4
 800389c:	609a      	str	r2, [r3, #8]
}
 800389e:	bf00      	nop
 80038a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038a4:	46bd      	mov	sp, r7
 80038a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038aa:	bf00      	nop
 80038ac:	51eb851f 	.word	0x51eb851f

080038b0 <__libc_init_array>:
 80038b0:	b570      	push	{r4, r5, r6, lr}
 80038b2:	4d0d      	ldr	r5, [pc, #52]	; (80038e8 <__libc_init_array+0x38>)
 80038b4:	4c0d      	ldr	r4, [pc, #52]	; (80038ec <__libc_init_array+0x3c>)
 80038b6:	1b64      	subs	r4, r4, r5
 80038b8:	10a4      	asrs	r4, r4, #2
 80038ba:	2600      	movs	r6, #0
 80038bc:	42a6      	cmp	r6, r4
 80038be:	d109      	bne.n	80038d4 <__libc_init_array+0x24>
 80038c0:	4d0b      	ldr	r5, [pc, #44]	; (80038f0 <__libc_init_array+0x40>)
 80038c2:	4c0c      	ldr	r4, [pc, #48]	; (80038f4 <__libc_init_array+0x44>)
 80038c4:	f000 f820 	bl	8003908 <_init>
 80038c8:	1b64      	subs	r4, r4, r5
 80038ca:	10a4      	asrs	r4, r4, #2
 80038cc:	2600      	movs	r6, #0
 80038ce:	42a6      	cmp	r6, r4
 80038d0:	d105      	bne.n	80038de <__libc_init_array+0x2e>
 80038d2:	bd70      	pop	{r4, r5, r6, pc}
 80038d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038d8:	4798      	blx	r3
 80038da:	3601      	adds	r6, #1
 80038dc:	e7ee      	b.n	80038bc <__libc_init_array+0xc>
 80038de:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e2:	4798      	blx	r3
 80038e4:	3601      	adds	r6, #1
 80038e6:	e7f2      	b.n	80038ce <__libc_init_array+0x1e>
 80038e8:	08003960 	.word	0x08003960
 80038ec:	08003960 	.word	0x08003960
 80038f0:	08003960 	.word	0x08003960
 80038f4:	08003964 	.word	0x08003964

080038f8 <memset>:
 80038f8:	4402      	add	r2, r0
 80038fa:	4603      	mov	r3, r0
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d100      	bne.n	8003902 <memset+0xa>
 8003900:	4770      	bx	lr
 8003902:	f803 1b01 	strb.w	r1, [r3], #1
 8003906:	e7f9      	b.n	80038fc <memset+0x4>

08003908 <_init>:
 8003908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390a:	bf00      	nop
 800390c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390e:	bc08      	pop	{r3}
 8003910:	469e      	mov	lr, r3
 8003912:	4770      	bx	lr

08003914 <_fini>:
 8003914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003916:	bf00      	nop
 8003918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391a:	bc08      	pop	{r3}
 800391c:	469e      	mov	lr, r3
 800391e:	4770      	bx	lr
