/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      HAL_GPIO_TogglePin(GPIOG, DEVLED_GREEN_Pin); // Replace GPIOA & GPIO_PIN_5 with your green LED pin
      // Delay for 500ms
      HAL_Delay(500);

      // Toggle DEVLED_RED
      HAL_GPIO_TogglePin(GPIOG, DEVLED_RED_Pin); // Replace GPIOB & GPIO_PIN_6 with your red LED pin
      // Delay for 500ms
      HAL_Delay(500);
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AMUX1_A0_Pin|AMUX2_EN_Pin|AMUX2_A2_Pin|AMUX2_A1_Pin
                          |AMUX2_A0_Pin|DMUX9_A1_Pin|DMUX8_A1_Pin|DMUX9_EN_Pin
                          |DMUX10_A0_Pin|DMUX10_EN_Pin|DMUX10_A1_Pin|DMUX11_A1_Pin
                          |DMUX11_A0_Pin|DMUX11_EN_Pin|AMUX0_A1_Pin|AMUX0_A0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AMUX3_EN_Pin|AMUX3_A2_Pin|AMUX3_A1_Pin|DMUX4_EN_Pin
                          |DMUX4_A1_Pin|BATTSIM_PSUP_EN_Pin|BON_BATT_EN_Pin|DMUX5_A0_Pin
                          |DMUX6_A1_Pin|DMUX1_A0_Pin|DMUX0_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, AMUX1_A1_Pin|AMUX3_A0_Pin|AMUX4_EN_Pin|AMUX4_A2_Pin
                          |AMUX4_A1_Pin|AMUX4_A0_Pin|AMUX1_A2_Pin|AMUX1_EN_Pin
                          |AMUX7_A0_Pin|DMUX3_EN_Pin|DMUX4_A0_Pin|DMUX7_A0_Pin
                          |DMUX6_A0_Pin|DMUX7_A1_Pin|DMUX8_EN_Pin|DMUX7_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LOAD_EN2_Pin|LOAD_EN1_Pin|LOAD_EN0_Pin|DMUX1_A1_Pin
                          |DMUX0_A1_Pin|DMUX0_A0_Pin|UART2_SELECT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DMUX5_A1_Pin|DMUX6_EN_Pin|DMUX5_EN_Pin|DMUX12_A1_Pin
                          |DMUX12_A0_Pin|AMUX7_A1_Pin|AMUX6_EN_Pin|AMUX0_EN_Pin
                          |AMUX0_A2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DMUX9_A0_Pin|DMUX8_A0_Pin|DEVLED_RED_Pin|UART2_EN0_Pin
                          |DEVLED_GREEN_Pin|DMUX3_A1_Pin|DMUX3_A0_Pin|DMUX2_EN_Pin
                          |DMUX2_A1_Pin|AMUX6_A1_Pin|AMUX5_A2_Pin|AMUX6_A0_Pin
                          |AMUX5_A1_Pin|AMUX7_EN_Pin|AMUX5_A0_Pin|AMUX7_A2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, UART3_SELECT_Pin|UART3_EN0_Pin|UART3_EN1_Pin|DMUX12_EN_Pin
                          |UART2_EN1_Pin|UART_SELECTOR_6_7_Pin|DMUX2_A0_Pin|DMUX1_EN_Pin
                          |AMUX6_A2_Pin|AMUX5_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : AMUX1_A0_Pin AMUX2_EN_Pin AMUX2_A2_Pin AMUX2_A1_Pin
                           AMUX2_A0_Pin DMUX9_A1_Pin DMUX8_A1_Pin DMUX9_EN_Pin
                           DMUX10_A0_Pin DMUX10_EN_Pin DMUX10_A1_Pin DMUX11_A1_Pin
                           DMUX11_A0_Pin DMUX11_EN_Pin AMUX0_A1_Pin AMUX0_A0_Pin */
  GPIO_InitStruct.Pin = AMUX1_A0_Pin|AMUX2_EN_Pin|AMUX2_A2_Pin|AMUX2_A1_Pin
                          |AMUX2_A0_Pin|DMUX9_A1_Pin|DMUX8_A1_Pin|DMUX9_EN_Pin
                          |DMUX10_A0_Pin|DMUX10_EN_Pin|DMUX10_A1_Pin|DMUX11_A1_Pin
                          |DMUX11_A0_Pin|DMUX11_EN_Pin|AMUX0_A1_Pin|AMUX0_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : AMUX3_EN_Pin AMUX3_A2_Pin AMUX3_A1_Pin DMUX4_EN_Pin
                           DMUX4_A1_Pin BATTSIM_PSUP_EN_Pin BON_BATT_EN_Pin DMUX5_A0_Pin
                           DMUX6_A1_Pin DMUX1_A0_Pin DMUX0_EN_Pin */
  GPIO_InitStruct.Pin = AMUX3_EN_Pin|AMUX3_A2_Pin|AMUX3_A1_Pin|DMUX4_EN_Pin
                          |DMUX4_A1_Pin|BATTSIM_PSUP_EN_Pin|BON_BATT_EN_Pin|DMUX5_A0_Pin
                          |DMUX6_A1_Pin|DMUX1_A0_Pin|DMUX0_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : AMUX1_A1_Pin AMUX3_A0_Pin AMUX4_EN_Pin AMUX4_A2_Pin
                           AMUX4_A1_Pin AMUX4_A0_Pin AMUX1_A2_Pin AMUX1_EN_Pin
                           AMUX7_A0_Pin DMUX3_EN_Pin DMUX4_A0_Pin DMUX7_A0_Pin
                           DMUX6_A0_Pin DMUX7_A1_Pin DMUX8_EN_Pin DMUX7_EN_Pin */
  GPIO_InitStruct.Pin = AMUX1_A1_Pin|AMUX3_A0_Pin|AMUX4_EN_Pin|AMUX4_A2_Pin
                          |AMUX4_A1_Pin|AMUX4_A0_Pin|AMUX1_A2_Pin|AMUX1_EN_Pin
                          |AMUX7_A0_Pin|DMUX3_EN_Pin|DMUX4_A0_Pin|DMUX7_A0_Pin
                          |DMUX6_A0_Pin|DMUX7_A1_Pin|DMUX8_EN_Pin|DMUX7_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

  /*Configure GPIO pins : LOAD_EN2_Pin LOAD_EN1_Pin LOAD_EN0_Pin DMUX1_A1_Pin
                           DMUX0_A1_Pin DMUX0_A0_Pin UART2_SELECT_Pin */
  GPIO_InitStruct.Pin = LOAD_EN2_Pin|LOAD_EN1_Pin|LOAD_EN0_Pin|DMUX1_A1_Pin
                          |DMUX0_A1_Pin|DMUX0_A0_Pin|UART2_SELECT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : SPI1_CS_Pin SPI1_SCLK_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|SPI1_SCLK_Pin|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : DMUX5_A1_Pin DMUX6_EN_Pin DMUX5_EN_Pin DMUX12_A1_Pin
                           DMUX12_A0_Pin AMUX7_A1_Pin AMUX6_EN_Pin AMUX0_EN_Pin
                           AMUX0_A2_Pin */
  GPIO_InitStruct.Pin = DMUX5_A1_Pin|DMUX6_EN_Pin|DMUX5_EN_Pin|DMUX12_A1_Pin
                          |DMUX12_A0_Pin|AMUX7_A1_Pin|AMUX6_EN_Pin|AMUX0_EN_Pin
                          |AMUX0_A2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : DMUX9_A0_Pin DMUX8_A0_Pin DEVLED_RED_Pin UART2_EN0_Pin
                           DEVLED_GREEN_Pin DMUX3_A1_Pin DMUX3_A0_Pin DMUX2_EN_Pin
                           DMUX2_A1_Pin AMUX6_A1_Pin AMUX5_A2_Pin AMUX6_A0_Pin
                           AMUX5_A1_Pin AMUX7_EN_Pin AMUX5_A0_Pin AMUX7_A2_Pin */
  GPIO_InitStruct.Pin = DMUX9_A0_Pin|DMUX8_A0_Pin|DEVLED_RED_Pin|UART2_EN0_Pin
                          |DEVLED_GREEN_Pin|DMUX3_A1_Pin|DMUX3_A0_Pin|DMUX2_EN_Pin
                          |DMUX2_A1_Pin|AMUX6_A1_Pin|AMUX5_A2_Pin|AMUX6_A0_Pin
                          |AMUX5_A1_Pin|AMUX7_EN_Pin|AMUX5_A0_Pin|AMUX7_A2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /*Configure GPIO pins : SPI2_CS_Pin SPI2_SCLK_Pin PB14 PB15 */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|SPI2_SCLK_Pin|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : STM_UART3_TX_Pin STM_UART3_RX_Pin */
  GPIO_InitStruct.Pin = STM_UART3_TX_Pin|STM_UART3_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : UART3_SELECT_Pin UART3_EN0_Pin UART3_EN1_Pin DMUX12_EN_Pin
                           UART2_EN1_Pin UART_SELECTOR_6_7_Pin DMUX2_A0_Pin DMUX1_EN_Pin
                           AMUX6_A2_Pin AMUX5_EN_Pin */
  GPIO_InitStruct.Pin = UART3_SELECT_Pin|UART3_EN0_Pin|UART3_EN1_Pin|DMUX12_EN_Pin
                          |UART2_EN1_Pin|UART_SELECTOR_6_7_Pin|DMUX2_A0_Pin|DMUX1_EN_Pin
                          |AMUX6_A2_Pin|AMUX5_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : STM_UART6_TX_Pin STM_UART6_RX_Pin */
  GPIO_InitStruct.Pin = STM_UART6_TX_Pin|STM_UART6_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : STM_UART1_TX_Pin STM_UART1_RX_Pin */
  GPIO_InitStruct.Pin = STM_UART1_TX_Pin|STM_UART1_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : STM_UART4_TX_Pin STM_UART4_RX_Pin */
  GPIO_InitStruct.Pin = STM_UART4_TX_Pin|STM_UART4_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : STM_UART5_TX_Pin */
  GPIO_InitStruct.Pin = STM_UART5_TX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
  HAL_GPIO_Init(STM_UART5_TX_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : DEV_SW_Pin */
  GPIO_InitStruct.Pin = DEV_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(DEV_SW_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : STM_UART5_RX_Pin */
  GPIO_InitStruct.Pin = STM_UART5_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
  HAL_GPIO_Init(STM_UART5_RX_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : STM_UART2_TX_Pin STM_UART2_RX_Pin */
  GPIO_InitStruct.Pin = STM_UART2_TX_Pin|STM_UART2_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
